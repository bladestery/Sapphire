/*
 * Stub for class boofcv.factory.filter.derivative.FactoryDerivative
 * Generated by Sapphire Compiler (sc).
 */
package boofcv.factory.filter.derivative.stubs;


public final class FactoryDerivative_Stub extends boofcv.factory.filter.derivative.FactoryDerivative implements sapphire.common.AppObjectStub {

    sapphire.policy.SapphirePolicy.SapphireClientPolicy $__client = null;
    boolean $__directInvocation = false;

    public FactoryDerivative_Stub () {
        super();
    }


    public void $__initialize(sapphire.policy.SapphirePolicy.SapphireClientPolicy client) {
        $__client = client;
    }

    public void $__initialize(boolean directInvocation) {
        $__directInvocation = directInvocation;
    }

    public Object $__clone() throws CloneNotSupportedException {
        return super.clone();
    }



    // Implementation of two1(Class, Class, GeneralizedImageOps, FactoryImageBorder)
    public boofcv.abst.filter.derivative.ImageGradient two1(java.lang.Class $param_Class_1, java.lang.Class $param_Class_2, boofcv.core.image.GeneralizedImageOps $param_GeneralizedImageOps_3, boofcv.core.image.border.FactoryImageBorder $param_FactoryImageBorder_4) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.two1( $param_Class_1,  $param_Class_2,  $param_GeneralizedImageOps_3,  $param_FactoryImageBorder_4);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <I,D> boofcv.abst.filter.derivative.ImageGradient<I, D> boofcv.factory.filter.derivative.FactoryDerivative.two1(java.lang.Class<I>,java.lang.Class<D>,boofcv.core.image.GeneralizedImageOps,boofcv.core.image.border.FactoryImageBorder)";
                $__params.add($param_Class_1);
                $__params.add($param_Class_2);
                $__params.add($param_GeneralizedImageOps_3);
                $__params.add($param_FactoryImageBorder_4);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.abst.filter.derivative.ImageGradient) $__result);
    }

    // Implementation of two0(Class, Class, GeneralizedImageOps, FactoryImageBorder)
    public boofcv.abst.filter.derivative.ImageGradient two0(java.lang.Class $param_Class_1, java.lang.Class $param_Class_2, boofcv.core.image.GeneralizedImageOps $param_GeneralizedImageOps_3, boofcv.core.image.border.FactoryImageBorder $param_FactoryImageBorder_4) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.two0( $param_Class_1,  $param_Class_2,  $param_GeneralizedImageOps_3,  $param_FactoryImageBorder_4);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <I,D> boofcv.abst.filter.derivative.ImageGradient<I, D> boofcv.factory.filter.derivative.FactoryDerivative.two0(java.lang.Class<I>,java.lang.Class<D>,boofcv.core.image.GeneralizedImageOps,boofcv.core.image.border.FactoryImageBorder)";
                $__params.add($param_Class_1);
                $__params.add($param_Class_2);
                $__params.add($param_GeneralizedImageOps_3);
                $__params.add($param_FactoryImageBorder_4);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.abst.filter.derivative.ImageGradient) $__result);
    }

    // Implementation of three(Class, Class, GeneralizedImageOps, FactoryImageBorder)
    public boofcv.abst.filter.derivative.ImageGradient three(java.lang.Class $param_Class_1, java.lang.Class $param_Class_2, boofcv.core.image.GeneralizedImageOps $param_GeneralizedImageOps_3, boofcv.core.image.border.FactoryImageBorder $param_FactoryImageBorder_4) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.three( $param_Class_1,  $param_Class_2,  $param_GeneralizedImageOps_3,  $param_FactoryImageBorder_4);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <I,D> boofcv.abst.filter.derivative.ImageGradient<I, D> boofcv.factory.filter.derivative.FactoryDerivative.three(java.lang.Class<I>,java.lang.Class<D>,boofcv.core.image.GeneralizedImageOps,boofcv.core.image.border.FactoryImageBorder)";
                $__params.add($param_Class_1);
                $__params.add($param_Class_2);
                $__params.add($param_GeneralizedImageOps_3);
                $__params.add($param_FactoryImageBorder_4);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.abst.filter.derivative.ImageGradient) $__result);
    }

    // Implementation of sobel(Class, Class, GeneralizedImageOps, FactoryImageBorder)
    public boofcv.abst.filter.derivative.ImageGradient sobel(java.lang.Class $param_Class_1, java.lang.Class $param_Class_2, boofcv.core.image.GeneralizedImageOps $param_GeneralizedImageOps_3, boofcv.core.image.border.FactoryImageBorder $param_FactoryImageBorder_4) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.sobel( $param_Class_1,  $param_Class_2,  $param_GeneralizedImageOps_3,  $param_FactoryImageBorder_4);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <I,D> boofcv.abst.filter.derivative.ImageGradient<I, D> boofcv.factory.filter.derivative.FactoryDerivative.sobel(java.lang.Class<I>,java.lang.Class<D>,boofcv.core.image.GeneralizedImageOps,boofcv.core.image.border.FactoryImageBorder)";
                $__params.add($param_Class_1);
                $__params.add($param_Class_2);
                $__params.add($param_GeneralizedImageOps_3);
                $__params.add($param_FactoryImageBorder_4);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.abst.filter.derivative.ImageGradient) $__result);
    }

    // Implementation of prewitt(Class, Class, GeneralizedImageOps, FactoryImageBorder)
    public boofcv.abst.filter.derivative.ImageGradient prewitt(java.lang.Class $param_Class_1, java.lang.Class $param_Class_2, boofcv.core.image.GeneralizedImageOps $param_GeneralizedImageOps_3, boofcv.core.image.border.FactoryImageBorder $param_FactoryImageBorder_4) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.prewitt( $param_Class_1,  $param_Class_2,  $param_GeneralizedImageOps_3,  $param_FactoryImageBorder_4);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <I,D> boofcv.abst.filter.derivative.ImageGradient<I, D> boofcv.factory.filter.derivative.FactoryDerivative.prewitt(java.lang.Class<I>,java.lang.Class<D>,boofcv.core.image.GeneralizedImageOps,boofcv.core.image.border.FactoryImageBorder)";
                $__params.add($param_Class_1);
                $__params.add($param_Class_2);
                $__params.add($param_GeneralizedImageOps_3);
                $__params.add($param_FactoryImageBorder_4);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.abst.filter.derivative.ImageGradient) $__result);
    }

    // Implementation of hessianThree(Class, GeneralizedImageOps)
    public boofcv.abst.filter.derivative.ImageHessian hessianThree(java.lang.Class $param_Class_1, boofcv.core.image.GeneralizedImageOps $param_GeneralizedImageOps_2) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.hessianThree( $param_Class_1,  $param_GeneralizedImageOps_2);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <D> boofcv.abst.filter.derivative.ImageHessian<D> boofcv.factory.filter.derivative.FactoryDerivative.hessianThree(java.lang.Class<D>,boofcv.core.image.GeneralizedImageOps)";
                $__params.add($param_Class_1);
                $__params.add($param_GeneralizedImageOps_2);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.abst.filter.derivative.ImageHessian) $__result);
    }

    // Implementation of hessianSobel(Class, GeneralizedImageOps)
    public boofcv.abst.filter.derivative.ImageHessian hessianSobel(java.lang.Class $param_Class_1, boofcv.core.image.GeneralizedImageOps $param_GeneralizedImageOps_2) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.hessianSobel( $param_Class_1,  $param_GeneralizedImageOps_2);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <D> boofcv.abst.filter.derivative.ImageHessian<D> boofcv.factory.filter.derivative.FactoryDerivative.hessianSobel(java.lang.Class<D>,boofcv.core.image.GeneralizedImageOps)";
                $__params.add($param_Class_1);
                $__params.add($param_GeneralizedImageOps_2);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.abst.filter.derivative.ImageHessian) $__result);
    }

    // Implementation of hessianPrewitt(Class, GeneralizedImageOps)
    public boofcv.abst.filter.derivative.ImageHessian hessianPrewitt(java.lang.Class $param_Class_1, boofcv.core.image.GeneralizedImageOps $param_GeneralizedImageOps_2) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.hessianPrewitt( $param_Class_1,  $param_GeneralizedImageOps_2);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <D> boofcv.abst.filter.derivative.ImageHessian<D> boofcv.factory.filter.derivative.FactoryDerivative.hessianPrewitt(java.lang.Class<D>,boofcv.core.image.GeneralizedImageOps)";
                $__params.add($param_Class_1);
                $__params.add($param_GeneralizedImageOps_2);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.abst.filter.derivative.ImageHessian) $__result);
    }

    // Implementation of hessianDirectThree(Class, Class, GeneralizedImageOps)
    public boofcv.abst.filter.derivative.ImageHessianDirect hessianDirectThree(java.lang.Class $param_Class_1, java.lang.Class $param_Class_2, boofcv.core.image.GeneralizedImageOps $param_GeneralizedImageOps_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.hessianDirectThree( $param_Class_1,  $param_Class_2,  $param_GeneralizedImageOps_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <I,D> boofcv.abst.filter.derivative.ImageHessianDirect<I, D> boofcv.factory.filter.derivative.FactoryDerivative.hessianDirectThree(java.lang.Class<I>,java.lang.Class<D>,boofcv.core.image.GeneralizedImageOps)";
                $__params.add($param_Class_1);
                $__params.add($param_Class_2);
                $__params.add($param_GeneralizedImageOps_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.abst.filter.derivative.ImageHessianDirect) $__result);
    }

    // Implementation of hessianDirectSobel(Class, Class, GeneralizedImageOps)
    public boofcv.abst.filter.derivative.ImageHessianDirect hessianDirectSobel(java.lang.Class $param_Class_1, java.lang.Class $param_Class_2, boofcv.core.image.GeneralizedImageOps $param_GeneralizedImageOps_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.hessianDirectSobel( $param_Class_1,  $param_Class_2,  $param_GeneralizedImageOps_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <I,D> boofcv.abst.filter.derivative.ImageHessianDirect<I, D> boofcv.factory.filter.derivative.FactoryDerivative.hessianDirectSobel(java.lang.Class<I>,java.lang.Class<D>,boofcv.core.image.GeneralizedImageOps)";
                $__params.add($param_Class_1);
                $__params.add($param_Class_2);
                $__params.add($param_GeneralizedImageOps_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.abst.filter.derivative.ImageHessianDirect) $__result);
    }

    // Implementation of hessian(Class, Class, GeneralizedImageOps)
    public boofcv.abst.filter.derivative.ImageHessian hessian(java.lang.Class $param_Class_1, java.lang.Class $param_Class_2, boofcv.core.image.GeneralizedImageOps $param_GeneralizedImageOps_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.hessian( $param_Class_1,  $param_Class_2,  $param_GeneralizedImageOps_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <D> boofcv.abst.filter.derivative.ImageHessian<D> boofcv.factory.filter.derivative.FactoryDerivative.hessian(java.lang.Class<?>,java.lang.Class<D>,boofcv.core.image.GeneralizedImageOps)";
                $__params.add($param_Class_1);
                $__params.add($param_Class_2);
                $__params.add($param_GeneralizedImageOps_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.abst.filter.derivative.ImageHessian) $__result);
    }

    // Implementation of gradientSB(DerivativeType, Class, Class)
    public boofcv.abst.filter.derivative.ImageGradient gradientSB(boofcv.alg.filter.derivative.DerivativeType $param_DerivativeType_1, java.lang.Class $param_Class_2, java.lang.Class $param_Class_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.gradientSB( $param_DerivativeType_1,  $param_Class_2,  $param_Class_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <I,D> boofcv.abst.filter.derivative.ImageGradient<I, D> boofcv.factory.filter.derivative.FactoryDerivative.gradientSB(boofcv.alg.filter.derivative.DerivativeType,java.lang.Class<I>,java.lang.Class<D>)";
                $__params.add($param_DerivativeType_1);
                $__params.add($param_Class_2);
                $__params.add($param_Class_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.abst.filter.derivative.ImageGradient) $__result);
    }

    // Implementation of gradientReduce(ImageGradient, DerivativeReduceType, Class)
    public boofcv.abst.filter.derivative.ImageGradient gradientReduce(boofcv.abst.filter.derivative.ImageGradient $param_ImageGradient_1, boofcv.alg.filter.derivative.DerivativeReduceType $param_DerivativeReduceType_2, java.lang.Class $param_Class_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.gradientReduce( $param_ImageGradient_1,  $param_DerivativeReduceType_2,  $param_Class_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <I,M,D> boofcv.abst.filter.derivative.ImageGradient<I, D> boofcv.factory.filter.derivative.FactoryDerivative.gradientReduce(boofcv.abst.filter.derivative.ImageGradient<I, M>,boofcv.alg.filter.derivative.DerivativeReduceType,java.lang.Class<D>)";
                $__params.add($param_ImageGradient_1);
                $__params.add($param_DerivativeReduceType_2);
                $__params.add($param_Class_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.abst.filter.derivative.ImageGradient) $__result);
    }

    // Implementation of gradientPL(DerivativeType, int, Class, Class)
    public boofcv.abst.filter.derivative.ImageGradient gradientPL(boofcv.alg.filter.derivative.DerivativeType $param_DerivativeType_1, int $param_int_2, java.lang.Class $param_Class_3, java.lang.Class $param_Class_4) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.gradientPL( $param_DerivativeType_1,  $param_int_2,  $param_Class_3,  $param_Class_4);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <I,D> boofcv.abst.filter.derivative.ImageGradient<boofcv.struct.image.Planar<I>, boofcv.struct.image.Planar<D>> boofcv.factory.filter.derivative.FactoryDerivative.gradientPL(boofcv.alg.filter.derivative.DerivativeType,int,java.lang.Class<I>,java.lang.Class<D>)";
                $__params.add($param_DerivativeType_1);
                $__params.add($param_int_2);
                $__params.add($param_Class_3);
                $__params.add($param_Class_4);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.abst.filter.derivative.ImageGradient) $__result);
    }

    // Implementation of gradient(DerivativeType, ImageType, ImageType)
    public boofcv.abst.filter.derivative.ImageGradient gradient(boofcv.alg.filter.derivative.DerivativeType $param_DerivativeType_1, boofcv.struct.image.ImageType $param_ImageType_2, boofcv.struct.image.ImageType $param_ImageType_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.gradient( $param_DerivativeType_1,  $param_ImageType_2,  $param_ImageType_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <I,D> boofcv.abst.filter.derivative.ImageGradient<I, D> boofcv.factory.filter.derivative.FactoryDerivative.gradient(boofcv.alg.filter.derivative.DerivativeType,boofcv.struct.image.ImageType<I>,boofcv.struct.image.ImageType<D>)";
                $__params.add($param_DerivativeType_1);
                $__params.add($param_ImageType_2);
                $__params.add($param_ImageType_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.abst.filter.derivative.ImageGradient) $__result);
    }

    // Implementation of gaussian(double, int, Class, Class)
    public boofcv.abst.filter.derivative.ImageGradient gaussian(double $param_double_1, int $param_int_2, java.lang.Class $param_Class_3, java.lang.Class $param_Class_4) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.gaussian( $param_double_1,  $param_int_2,  $param_Class_3,  $param_Class_4);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <I,D> boofcv.abst.filter.derivative.ImageGradient<I, D> boofcv.factory.filter.derivative.FactoryDerivative.gaussian(double,int,java.lang.Class<I>,java.lang.Class<D>)";
                $__params.add($param_double_1);
                $__params.add($param_int_2);
                $__params.add($param_Class_3);
                $__params.add($param_Class_4);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.abst.filter.derivative.ImageGradient) $__result);
    }
}
