/*
 * Stub for class boofcv.alg.misc.GImageMiscOps
 * Generated by Sapphire Compiler (sc).
 */
package boofcv.alg.misc.stubs;


public final class GImageMiscOps_Stub extends boofcv.alg.misc.GImageMiscOps implements sapphire.common.AppObjectStub {

    sapphire.policy.SapphirePolicy.SapphireClientPolicy $__client = null;
    boolean $__directInvocation = false;

    public GImageMiscOps_Stub () {
        super();
    }


    public void $__initialize(sapphire.policy.SapphirePolicy.SapphireClientPolicy client) {
        $__client = client;
    }

    public void $__initialize(boolean directInvocation) {
        $__directInvocation = directInvocation;
    }

    public Object $__clone() throws CloneNotSupportedException {
        return super.clone();
    }



    // Implementation of rotateCW(ImageBase, ImageBase, ImageMiscOps)
    public void rotateCW(boofcv.struct.image.ImageBase $param_ImageBase_1, boofcv.struct.image.ImageBase $param_ImageBase_2, boofcv.alg.misc.ImageMiscOps $param_ImageMiscOps_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.rotateCW( $param_ImageBase_1,  $param_ImageBase_2,  $param_ImageMiscOps_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.misc.GImageMiscOps.rotateCW(boofcv.struct.image.ImageBase,boofcv.struct.image.ImageBase,boofcv.alg.misc.ImageMiscOps)";
                $__params.add($param_ImageBase_1);
                $__params.add($param_ImageBase_2);
                $__params.add($param_ImageMiscOps_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of rotateCW(ImageBase, ImageMiscOps)
    public void rotateCW(boofcv.struct.image.ImageBase $param_ImageBase_1, boofcv.alg.misc.ImageMiscOps $param_ImageMiscOps_2) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.rotateCW( $param_ImageBase_1,  $param_ImageMiscOps_2);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.misc.GImageMiscOps.rotateCW(boofcv.struct.image.ImageBase,boofcv.alg.misc.ImageMiscOps)";
                $__params.add($param_ImageBase_1);
                $__params.add($param_ImageMiscOps_2);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of rotateCCW(ImageBase, ImageBase, ImageMiscOps)
    public void rotateCCW(boofcv.struct.image.ImageBase $param_ImageBase_1, boofcv.struct.image.ImageBase $param_ImageBase_2, boofcv.alg.misc.ImageMiscOps $param_ImageMiscOps_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.rotateCCW( $param_ImageBase_1,  $param_ImageBase_2,  $param_ImageMiscOps_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.misc.GImageMiscOps.rotateCCW(boofcv.struct.image.ImageBase,boofcv.struct.image.ImageBase,boofcv.alg.misc.ImageMiscOps)";
                $__params.add($param_ImageBase_1);
                $__params.add($param_ImageBase_2);
                $__params.add($param_ImageMiscOps_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of rotateCCW(ImageBase, ImageMiscOps)
    public void rotateCCW(boofcv.struct.image.ImageBase $param_ImageBase_1, boofcv.alg.misc.ImageMiscOps $param_ImageMiscOps_2) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.rotateCCW( $param_ImageBase_1,  $param_ImageMiscOps_2);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.misc.GImageMiscOps.rotateCCW(boofcv.struct.image.ImageBase,boofcv.alg.misc.ImageMiscOps)";
                $__params.add($param_ImageBase_1);
                $__params.add($param_ImageMiscOps_2);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of insertBand(ImageGray, int, ImageMultiBand, ImageMiscOps)
    public void insertBand(boofcv.struct.image.ImageGray $param_ImageGray_1, int $param_int_2, boofcv.struct.image.ImageMultiBand $param_ImageMultiBand_3, boofcv.alg.misc.ImageMiscOps $param_ImageMiscOps_4) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.insertBand( $param_ImageGray_1,  $param_int_2,  $param_ImageMultiBand_3,  $param_ImageMiscOps_4);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.misc.GImageMiscOps.insertBand(boofcv.struct.image.ImageGray,int,boofcv.struct.image.ImageMultiBand,boofcv.alg.misc.ImageMiscOps)";
                $__params.add($param_ImageGray_1);
                $__params.add($param_int_2);
                $__params.add($param_ImageMultiBand_3);
                $__params.add($param_ImageMiscOps_4);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of flipVertical(ImageBase, ImageMiscOps)
    public void flipVertical(boofcv.struct.image.ImageBase $param_ImageBase_1, boofcv.alg.misc.ImageMiscOps $param_ImageMiscOps_2) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.flipVertical( $param_ImageBase_1,  $param_ImageMiscOps_2);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.misc.GImageMiscOps.flipVertical(boofcv.struct.image.ImageBase,boofcv.alg.misc.ImageMiscOps)";
                $__params.add($param_ImageBase_1);
                $__params.add($param_ImageMiscOps_2);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of flipHorizontal(ImageBase, ImageMiscOps)
    public void flipHorizontal(boofcv.struct.image.ImageBase $param_ImageBase_1, boofcv.alg.misc.ImageMiscOps $param_ImageMiscOps_2) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.flipHorizontal( $param_ImageBase_1,  $param_ImageMiscOps_2);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.misc.GImageMiscOps.flipHorizontal(boofcv.struct.image.ImageBase,boofcv.alg.misc.ImageMiscOps)";
                $__params.add($param_ImageBase_1);
                $__params.add($param_ImageMiscOps_2);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of fillUniform(ImageBase, Random, double, double, ImageMiscOps)
    public void fillUniform(boofcv.struct.image.ImageBase $param_ImageBase_1, java.util.Random $param_Random_2, double $param_double_3, double $param_double_4, boofcv.alg.misc.ImageMiscOps $param_ImageMiscOps_5) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.fillUniform( $param_ImageBase_1,  $param_Random_2,  $param_double_3,  $param_double_4,  $param_ImageMiscOps_5);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.misc.GImageMiscOps.fillUniform(boofcv.struct.image.ImageBase,java.util.Random,double,double,boofcv.alg.misc.ImageMiscOps)";
                $__params.add($param_ImageBase_1);
                $__params.add($param_Random_2);
                $__params.add($param_double_3);
                $__params.add($param_double_4);
                $__params.add($param_ImageMiscOps_5);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of fillRectangle(ImageBase, double, int, int, int, int, ImageMiscOps)
    public void fillRectangle(boofcv.struct.image.ImageBase $param_ImageBase_1, double $param_double_2, int $param_int_3, int $param_int_4, int $param_int_5, int $param_int_6, boofcv.alg.misc.ImageMiscOps $param_ImageMiscOps_7) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.fillRectangle( $param_ImageBase_1,  $param_double_2,  $param_int_3,  $param_int_4,  $param_int_5,  $param_int_6,  $param_ImageMiscOps_7);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.misc.GImageMiscOps.fillRectangle(boofcv.struct.image.ImageBase,double,int,int,int,int,boofcv.alg.misc.ImageMiscOps)";
                $__params.add($param_ImageBase_1);
                $__params.add($param_double_2);
                $__params.add($param_int_3);
                $__params.add($param_int_4);
                $__params.add($param_int_5);
                $__params.add($param_int_6);
                $__params.add($param_ImageMiscOps_7);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of fillGaussian(ImageBase, Random, double, double, double, double, ImageMiscOps)
    public void fillGaussian(boofcv.struct.image.ImageBase $param_ImageBase_1, java.util.Random $param_Random_2, double $param_double_3, double $param_double_4, double $param_double_5, double $param_double_6, boofcv.alg.misc.ImageMiscOps $param_ImageMiscOps_7) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.fillGaussian( $param_ImageBase_1,  $param_Random_2,  $param_double_3,  $param_double_4,  $param_double_5,  $param_double_6,  $param_ImageMiscOps_7);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.misc.GImageMiscOps.fillGaussian(boofcv.struct.image.ImageBase,java.util.Random,double,double,double,double,boofcv.alg.misc.ImageMiscOps)";
                $__params.add($param_ImageBase_1);
                $__params.add($param_Random_2);
                $__params.add($param_double_3);
                $__params.add($param_double_4);
                $__params.add($param_double_5);
                $__params.add($param_double_6);
                $__params.add($param_ImageMiscOps_7);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of fillBorder(ImageBase, double, int, ImageMiscOps)
    public void fillBorder(boofcv.struct.image.ImageBase $param_ImageBase_1, double $param_double_2, int $param_int_3, boofcv.alg.misc.ImageMiscOps $param_ImageMiscOps_4) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.fillBorder( $param_ImageBase_1,  $param_double_2,  $param_int_3,  $param_ImageMiscOps_4);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.misc.GImageMiscOps.fillBorder(boofcv.struct.image.ImageBase,double,int,boofcv.alg.misc.ImageMiscOps)";
                $__params.add($param_ImageBase_1);
                $__params.add($param_double_2);
                $__params.add($param_int_3);
                $__params.add($param_ImageMiscOps_4);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of fillBand(ImageMultiBand, int, double, ImageMiscOps)
    public void fillBand(boofcv.struct.image.ImageMultiBand $param_ImageMultiBand_1, int $param_int_2, double $param_double_3, boofcv.alg.misc.ImageMiscOps $param_ImageMiscOps_4) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.fillBand( $param_ImageMultiBand_1,  $param_int_2,  $param_double_3,  $param_ImageMiscOps_4);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.misc.GImageMiscOps.fillBand(boofcv.struct.image.ImageMultiBand,int,double,boofcv.alg.misc.ImageMiscOps)";
                $__params.add($param_ImageMultiBand_1);
                $__params.add($param_int_2);
                $__params.add($param_double_3);
                $__params.add($param_ImageMiscOps_4);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of fill(ImageBase, double[], ImageMiscOps)
    public void fill(boofcv.struct.image.ImageBase $param_ImageBase_1, double[] $param_arrayOf_double_2, boofcv.alg.misc.ImageMiscOps $param_ImageMiscOps_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.fill( $param_ImageBase_1,  $param_arrayOf_double_2,  $param_ImageMiscOps_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.misc.GImageMiscOps.fill(boofcv.struct.image.ImageBase,double[],boofcv.alg.misc.ImageMiscOps)";
                $__params.add($param_ImageBase_1);
                $__params.add($param_arrayOf_double_2);
                $__params.add($param_ImageMiscOps_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of fill(ImageBase, double, ImageMiscOps)
    public void fill(boofcv.struct.image.ImageBase $param_ImageBase_1, double $param_double_2, boofcv.alg.misc.ImageMiscOps $param_ImageMiscOps_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.fill( $param_ImageBase_1,  $param_double_2,  $param_ImageMiscOps_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.misc.GImageMiscOps.fill(boofcv.struct.image.ImageBase,double,boofcv.alg.misc.ImageMiscOps)";
                $__params.add($param_ImageBase_1);
                $__params.add($param_double_2);
                $__params.add($param_ImageMiscOps_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of copy(int, int, int, int, int, int, ImageBase, ImageBase, ImageMiscOps)
    public void copy(int $param_int_1, int $param_int_2, int $param_int_3, int $param_int_4, int $param_int_5, int $param_int_6, boofcv.struct.image.ImageBase $param_ImageBase_7, boofcv.struct.image.ImageBase $param_ImageBase_8, boofcv.alg.misc.ImageMiscOps $param_ImageMiscOps_9) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.copy( $param_int_1,  $param_int_2,  $param_int_3,  $param_int_4,  $param_int_5,  $param_int_6,  $param_ImageBase_7,  $param_ImageBase_8,  $param_ImageMiscOps_9);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.misc.GImageMiscOps.copy(int,int,int,int,int,int,boofcv.struct.image.ImageBase,boofcv.struct.image.ImageBase,boofcv.alg.misc.ImageMiscOps)";
                $__params.add($param_int_1);
                $__params.add($param_int_2);
                $__params.add($param_int_3);
                $__params.add($param_int_4);
                $__params.add($param_int_5);
                $__params.add($param_int_6);
                $__params.add($param_ImageBase_7);
                $__params.add($param_ImageBase_8);
                $__params.add($param_ImageMiscOps_9);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of addUniform(ImageBase, Random, double, double, ImageMiscOps)
    public void addUniform(boofcv.struct.image.ImageBase $param_ImageBase_1, java.util.Random $param_Random_2, double $param_double_3, double $param_double_4, boofcv.alg.misc.ImageMiscOps $param_ImageMiscOps_5) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.addUniform( $param_ImageBase_1,  $param_Random_2,  $param_double_3,  $param_double_4,  $param_ImageMiscOps_5);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.misc.GImageMiscOps.addUniform(boofcv.struct.image.ImageBase,java.util.Random,double,double,boofcv.alg.misc.ImageMiscOps)";
                $__params.add($param_ImageBase_1);
                $__params.add($param_Random_2);
                $__params.add($param_double_3);
                $__params.add($param_double_4);
                $__params.add($param_ImageMiscOps_5);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of addGaussian(ImageBase, Random, double, double, double, ImageMiscOps)
    public void addGaussian(boofcv.struct.image.ImageBase $param_ImageBase_1, java.util.Random $param_Random_2, double $param_double_3, double $param_double_4, double $param_double_5, boofcv.alg.misc.ImageMiscOps $param_ImageMiscOps_6) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.addGaussian( $param_ImageBase_1,  $param_Random_2,  $param_double_3,  $param_double_4,  $param_double_5,  $param_ImageMiscOps_6);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.misc.GImageMiscOps.addGaussian(boofcv.struct.image.ImageBase,java.util.Random,double,double,double,boofcv.alg.misc.ImageMiscOps)";
                $__params.add($param_ImageBase_1);
                $__params.add($param_Random_2);
                $__params.add($param_double_3);
                $__params.add($param_double_4);
                $__params.add($param_double_5);
                $__params.add($param_ImageMiscOps_6);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
