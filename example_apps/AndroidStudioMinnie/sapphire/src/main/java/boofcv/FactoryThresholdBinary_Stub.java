/*
 * Stub for class boofcv.factory.filter.binary.FactoryThresholdBinary
 * Generated by Sapphire Compiler (sc).
 */
package boofcv.factory.filter.binary.stubs;


public final class FactoryThresholdBinary_Stub extends boofcv.factory.filter.binary.FactoryThresholdBinary implements sapphire.common.AppObjectStub {

    sapphire.policy.SapphirePolicy.SapphireClientPolicy $__client = null;
    boolean $__directInvocation = false;

    public FactoryThresholdBinary_Stub () {
        super();
    }


    public void $__initialize(sapphire.policy.SapphirePolicy.SapphireClientPolicy client) {
        $__client = client;
    }

    public void $__initialize(boolean directInvocation) {
        $__directInvocation = directInvocation;
    }

    public Object $__clone() throws CloneNotSupportedException {
        return super.clone();
    }



    // Implementation of threshold(ConfigThreshold, Class, ImageType)
    public boofcv.abst.filter.binary.InputToBinary threshold(boofcv.factory.filter.binary.ConfigThreshold $param_ConfigThreshold_1, java.lang.Class $param_Class_2, boofcv.struct.image.ImageType $param_ImageType_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.threshold( $param_ConfigThreshold_1,  $param_Class_2,  $param_ImageType_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <T> boofcv.abst.filter.binary.InputToBinary<T> boofcv.factory.filter.binary.FactoryThresholdBinary.threshold(boofcv.factory.filter.binary.ConfigThreshold,java.lang.Class<T>,boofcv.struct.image.ImageType)";
                $__params.add($param_ConfigThreshold_1);
                $__params.add($param_Class_2);
                $__params.add($param_ImageType_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.abst.filter.binary.InputToBinary) $__result);
    }

    // Implementation of localSquareBlockMinMax(int, double, boolean, double, Class, ImageType)
    public boofcv.abst.filter.binary.InputToBinary localSquareBlockMinMax(int $param_int_1, double $param_double_2, boolean $param_boolean_3, double $param_double_4, java.lang.Class $param_Class_5, boofcv.struct.image.ImageType $param_ImageType_6) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.localSquareBlockMinMax( $param_int_1,  $param_double_2,  $param_boolean_3,  $param_double_4,  $param_Class_5,  $param_ImageType_6);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <T> boofcv.abst.filter.binary.InputToBinary<T> boofcv.factory.filter.binary.FactoryThresholdBinary.localSquareBlockMinMax(int,double,boolean,double,java.lang.Class<T>,boofcv.struct.image.ImageType)";
                $__params.add($param_int_1);
                $__params.add($param_double_2);
                $__params.add($param_boolean_3);
                $__params.add($param_double_4);
                $__params.add($param_Class_5);
                $__params.add($param_ImageType_6);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.abst.filter.binary.InputToBinary) $__result);
    }

    // Implementation of localSquare(int, double, boolean, Class, ImageType)
    public boofcv.abst.filter.binary.InputToBinary localSquare(int $param_int_1, double $param_double_2, boolean $param_boolean_3, java.lang.Class $param_Class_4, boofcv.struct.image.ImageType $param_ImageType_5) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.localSquare( $param_int_1,  $param_double_2,  $param_boolean_3,  $param_Class_4,  $param_ImageType_5);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <T> boofcv.abst.filter.binary.InputToBinary<T> boofcv.factory.filter.binary.FactoryThresholdBinary.localSquare(int,double,boolean,java.lang.Class<T>,boofcv.struct.image.ImageType)";
                $__params.add($param_int_1);
                $__params.add($param_double_2);
                $__params.add($param_boolean_3);
                $__params.add($param_Class_4);
                $__params.add($param_ImageType_5);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.abst.filter.binary.InputToBinary) $__result);
    }

    // Implementation of localSauvola(int, float, boolean, Class, ImageType)
    public boofcv.abst.filter.binary.InputToBinary localSauvola(int $param_int_1, float $param_float_2, boolean $param_boolean_3, java.lang.Class $param_Class_4, boofcv.struct.image.ImageType $param_ImageType_5) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.localSauvola( $param_int_1,  $param_float_2,  $param_boolean_3,  $param_Class_4,  $param_ImageType_5);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <T> boofcv.abst.filter.binary.InputToBinary<T> boofcv.factory.filter.binary.FactoryThresholdBinary.localSauvola(int,float,boolean,java.lang.Class<T>,boofcv.struct.image.ImageType)";
                $__params.add($param_int_1);
                $__params.add($param_float_2);
                $__params.add($param_boolean_3);
                $__params.add($param_Class_4);
                $__params.add($param_ImageType_5);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.abst.filter.binary.InputToBinary) $__result);
    }

    // Implementation of localGaussian(int, double, boolean, Class, ImageType)
    public boofcv.abst.filter.binary.InputToBinary localGaussian(int $param_int_1, double $param_double_2, boolean $param_boolean_3, java.lang.Class $param_Class_4, boofcv.struct.image.ImageType $param_ImageType_5) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.localGaussian( $param_int_1,  $param_double_2,  $param_boolean_3,  $param_Class_4,  $param_ImageType_5);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <T> boofcv.abst.filter.binary.InputToBinary<T> boofcv.factory.filter.binary.FactoryThresholdBinary.localGaussian(int,double,boolean,java.lang.Class<T>,boofcv.struct.image.ImageType)";
                $__params.add($param_int_1);
                $__params.add($param_double_2);
                $__params.add($param_boolean_3);
                $__params.add($param_Class_4);
                $__params.add($param_ImageType_5);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.abst.filter.binary.InputToBinary) $__result);
    }

    // Implementation of globalOtsu(int, int, boolean, Class, ImageType)
    public boofcv.abst.filter.binary.InputToBinary globalOtsu(int $param_int_1, int $param_int_2, boolean $param_boolean_3, java.lang.Class $param_Class_4, boofcv.struct.image.ImageType $param_ImageType_5) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.globalOtsu( $param_int_1,  $param_int_2,  $param_boolean_3,  $param_Class_4,  $param_ImageType_5);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <T> boofcv.abst.filter.binary.InputToBinary<T> boofcv.factory.filter.binary.FactoryThresholdBinary.globalOtsu(int,int,boolean,java.lang.Class<T>,boofcv.struct.image.ImageType)";
                $__params.add($param_int_1);
                $__params.add($param_int_2);
                $__params.add($param_boolean_3);
                $__params.add($param_Class_4);
                $__params.add($param_ImageType_5);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.abst.filter.binary.InputToBinary) $__result);
    }

    // Implementation of globalFixed(double, boolean, Class, ImageType)
    public boofcv.abst.filter.binary.InputToBinary globalFixed(double $param_double_1, boolean $param_boolean_2, java.lang.Class $param_Class_3, boofcv.struct.image.ImageType $param_ImageType_4) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.globalFixed( $param_double_1,  $param_boolean_2,  $param_Class_3,  $param_ImageType_4);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <T> boofcv.abst.filter.binary.InputToBinary<T> boofcv.factory.filter.binary.FactoryThresholdBinary.globalFixed(double,boolean,java.lang.Class<T>,boofcv.struct.image.ImageType)";
                $__params.add($param_double_1);
                $__params.add($param_boolean_2);
                $__params.add($param_Class_3);
                $__params.add($param_ImageType_4);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.abst.filter.binary.InputToBinary) $__result);
    }

    // Implementation of globalEntropy(int, int, boolean, Class, ImageType)
    public boofcv.abst.filter.binary.InputToBinary globalEntropy(int $param_int_1, int $param_int_2, boolean $param_boolean_3, java.lang.Class $param_Class_4, boofcv.struct.image.ImageType $param_ImageType_5) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.globalEntropy( $param_int_1,  $param_int_2,  $param_boolean_3,  $param_Class_4,  $param_ImageType_5);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <T> boofcv.abst.filter.binary.InputToBinary<T> boofcv.factory.filter.binary.FactoryThresholdBinary.globalEntropy(int,int,boolean,java.lang.Class<T>,boofcv.struct.image.ImageType)";
                $__params.add($param_int_1);
                $__params.add($param_int_2);
                $__params.add($param_boolean_3);
                $__params.add($param_Class_4);
                $__params.add($param_ImageType_5);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.abst.filter.binary.InputToBinary) $__result);
    }
}
