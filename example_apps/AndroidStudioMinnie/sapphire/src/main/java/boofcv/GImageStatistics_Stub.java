/*
 * Stub for class boofcv.alg.misc.GImageStatistics
 * Generated by Sapphire Compiler (sc).
 */
package boofcv.alg.misc.stubs;


public final class GImageStatistics_Stub extends boofcv.alg.misc.GImageStatistics implements sapphire.common.AppObjectStub {

    sapphire.policy.SapphirePolicy.SapphireClientPolicy $__client = null;
    boolean $__directInvocation = false;

    public GImageStatistics_Stub () {
        super();
    }


    public void $__initialize(sapphire.policy.SapphirePolicy.SapphireClientPolicy client) {
        $__client = client;
    }

    public void $__initialize(boolean directInvocation) {
        $__directInvocation = directInvocation;
    }

    public Object $__clone() throws CloneNotSupportedException {
        return super.clone();
    }



    // Implementation of variance(ImageGray, double, ImageStatistics)
    public double variance(boofcv.struct.image.ImageGray $param_ImageGray_1, double $param_double_2, boofcv.alg.misc.ImageStatistics $param_ImageStatistics_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.variance( $param_ImageGray_1,  $param_double_2,  $param_ImageStatistics_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <T> double boofcv.alg.misc.GImageStatistics.variance(T,double,boofcv.alg.misc.ImageStatistics)";
                $__params.add($param_ImageGray_1);
                $__params.add($param_double_2);
                $__params.add($param_ImageStatistics_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Double) $__result).doubleValue();
    }

    // Implementation of sum(ImageBase, ImageStatistics)
    public double sum(boofcv.struct.image.ImageBase $param_ImageBase_1, boofcv.alg.misc.ImageStatistics $param_ImageStatistics_2) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.sum( $param_ImageBase_1,  $param_ImageStatistics_2);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public double boofcv.alg.misc.GImageStatistics.sum(boofcv.struct.image.ImageBase,boofcv.alg.misc.ImageStatistics)";
                $__params.add($param_ImageBase_1);
                $__params.add($param_ImageStatistics_2);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Double) $__result).doubleValue();
    }

    // Implementation of min(ImageBase, ImageStatistics)
    public double min(boofcv.struct.image.ImageBase $param_ImageBase_1, boofcv.alg.misc.ImageStatistics $param_ImageStatistics_2) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.min( $param_ImageBase_1,  $param_ImageStatistics_2);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public double boofcv.alg.misc.GImageStatistics.min(boofcv.struct.image.ImageBase,boofcv.alg.misc.ImageStatistics)";
                $__params.add($param_ImageBase_1);
                $__params.add($param_ImageStatistics_2);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Double) $__result).doubleValue();
    }

    // Implementation of meanDiffSq(ImageBase, ImageBase, ImageStatistics, InputSanityCheck)
    public double meanDiffSq(boofcv.struct.image.ImageBase $param_ImageBase_1, boofcv.struct.image.ImageBase $param_ImageBase_2, boofcv.alg.misc.ImageStatistics $param_ImageStatistics_3, boofcv.alg.InputSanityCheck $param_InputSanityCheck_4) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.meanDiffSq( $param_ImageBase_1,  $param_ImageBase_2,  $param_ImageStatistics_3,  $param_InputSanityCheck_4);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <T> double boofcv.alg.misc.GImageStatistics.meanDiffSq(T,T,boofcv.alg.misc.ImageStatistics,boofcv.alg.InputSanityCheck)";
                $__params.add($param_ImageBase_1);
                $__params.add($param_ImageBase_2);
                $__params.add($param_ImageStatistics_3);
                $__params.add($param_InputSanityCheck_4);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Double) $__result).doubleValue();
    }

    // Implementation of meanDiffAbs(ImageBase, ImageBase, ImageStatistics, InputSanityCheck)
    public double meanDiffAbs(boofcv.struct.image.ImageBase $param_ImageBase_1, boofcv.struct.image.ImageBase $param_ImageBase_2, boofcv.alg.misc.ImageStatistics $param_ImageStatistics_3, boofcv.alg.InputSanityCheck $param_InputSanityCheck_4) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.meanDiffAbs( $param_ImageBase_1,  $param_ImageBase_2,  $param_ImageStatistics_3,  $param_InputSanityCheck_4);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <T> double boofcv.alg.misc.GImageStatistics.meanDiffAbs(T,T,boofcv.alg.misc.ImageStatistics,boofcv.alg.InputSanityCheck)";
                $__params.add($param_ImageBase_1);
                $__params.add($param_ImageBase_2);
                $__params.add($param_ImageStatistics_3);
                $__params.add($param_InputSanityCheck_4);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Double) $__result).doubleValue();
    }

    // Implementation of mean(ImageBase, ImageStatistics)
    public double mean(boofcv.struct.image.ImageBase $param_ImageBase_1, boofcv.alg.misc.ImageStatistics $param_ImageStatistics_2) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.mean( $param_ImageBase_1,  $param_ImageStatistics_2);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public double boofcv.alg.misc.GImageStatistics.mean(boofcv.struct.image.ImageBase,boofcv.alg.misc.ImageStatistics)";
                $__params.add($param_ImageBase_1);
                $__params.add($param_ImageStatistics_2);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Double) $__result).doubleValue();
    }

    // Implementation of maxAbs(ImageBase, ImageStatistics)
    public double maxAbs(boofcv.struct.image.ImageBase $param_ImageBase_1, boofcv.alg.misc.ImageStatistics $param_ImageStatistics_2) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.maxAbs( $param_ImageBase_1,  $param_ImageStatistics_2);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public double boofcv.alg.misc.GImageStatistics.maxAbs(boofcv.struct.image.ImageBase,boofcv.alg.misc.ImageStatistics)";
                $__params.add($param_ImageBase_1);
                $__params.add($param_ImageStatistics_2);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Double) $__result).doubleValue();
    }

    // Implementation of max(ImageBase, ImageStatistics)
    public double max(boofcv.struct.image.ImageBase $param_ImageBase_1, boofcv.alg.misc.ImageStatistics $param_ImageStatistics_2) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.max( $param_ImageBase_1,  $param_ImageStatistics_2);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public double boofcv.alg.misc.GImageStatistics.max(boofcv.struct.image.ImageBase,boofcv.alg.misc.ImageStatistics)";
                $__params.add($param_ImageBase_1);
                $__params.add($param_ImageStatistics_2);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Double) $__result).doubleValue();
    }

    // Implementation of histogram(ImageGray, int, int[], ImageStatistics)
    public void histogram(boofcv.struct.image.ImageGray $param_ImageGray_1, int $param_int_2, int[] $param_arrayOf_int_3, boofcv.alg.misc.ImageStatistics $param_ImageStatistics_4) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.histogram( $param_ImageGray_1,  $param_int_2,  $param_arrayOf_int_3,  $param_ImageStatistics_4);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.misc.GImageStatistics.histogram(boofcv.struct.image.ImageGray,int,int[],boofcv.alg.misc.ImageStatistics)";
                $__params.add($param_ImageGray_1);
                $__params.add($param_int_2);
                $__params.add($param_arrayOf_int_3);
                $__params.add($param_ImageStatistics_4);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
