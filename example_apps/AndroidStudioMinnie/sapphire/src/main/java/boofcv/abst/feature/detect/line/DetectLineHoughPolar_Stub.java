/*
 * Stub for class boofcv.abst.feature.detect.line.DetectLineHoughPolar
 * Generated by Sapphire Compiler (sc).
 */
package boofcv.abst.feature.detect.line.stubs;


public final class DetectLineHoughPolar_Stub extends boofcv.abst.feature.detect.line.DetectLineHoughPolar implements sapphire.common.AppObjectStub {

    sapphire.policy.SapphirePolicy.SapphireClientPolicy $__client = null;
    boolean $__directInvocation = false;

    public DetectLineHoughPolar_Stub (int $param_int_1, int $param_int_2, double $param_double_3, double $param_double_4, float $param_float_5, int $param_int_6, boofcv.abst.filter.derivative.ImageGradient $param_ImageGradient_7, boofcv.struct.image.ImageType $param_ImageType_8, boofcv.factory.feature.detect.extract.FactoryFeatureExtractor $param_FactoryFeatureExtractor_9) {
        super($param_int_1, $param_int_2, $param_double_3, $param_double_4, $param_float_5, $param_int_6, $param_ImageGradient_7, $param_ImageType_8, $param_FactoryFeatureExtractor_9);
    }


    public void $__initialize(sapphire.policy.SapphirePolicy.SapphireClientPolicy client) {
        $__client = client;
    }

    public void $__initialize(boolean directInvocation) {
        $__directInvocation = directInvocation;
    }

    public Object $__clone() throws CloneNotSupportedException {
        return super.clone();
    }



    // Implementation of getTransform()
    public boofcv.alg.feature.detect.line.HoughTransformLinePolar getTransform() {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.getTransform();
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public boofcv.alg.feature.detect.line.HoughTransformLinePolar boofcv.abst.feature.detect.line.DetectLineHoughPolar.getTransform()";
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.alg.feature.detect.line.HoughTransformLinePolar) $__result);
    }

    // Implementation of getEdgeIntensity()
    public boofcv.struct.image.GrayF32 getEdgeIntensity() {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.getEdgeIntensity();
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public boofcv.struct.image.GrayF32 boofcv.abst.feature.detect.line.DetectLineHoughPolar.getEdgeIntensity()";
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.struct.image.GrayF32) $__result);
    }

    // Implementation of getDerivY()
    public boofcv.struct.image.ImageGray getDerivY() {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.getDerivY();
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public D boofcv.abst.feature.detect.line.DetectLineHoughPolar.getDerivY()";
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.struct.image.ImageGray) $__result);
    }

    // Implementation of getDerivX()
    public boofcv.struct.image.ImageGray getDerivX() {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.getDerivX();
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public D boofcv.abst.feature.detect.line.DetectLineHoughPolar.getDerivX()";
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.struct.image.ImageGray) $__result);
    }

    // Implementation of getBinary()
    public boofcv.struct.image.GrayU8 getBinary() {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.getBinary();
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public boofcv.struct.image.GrayU8 boofcv.abst.feature.detect.line.DetectLineHoughPolar.getBinary()";
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.struct.image.GrayU8) $__result);
    }

    // Implementation of detect(ImageGray, InputSanityCheck, DerivativeHelperFunctions, ConvolveImageNoBorder, GradientToEdgeFeatures, GeneralizedImageOps, ThresholdImageOps, GGradientToEdgeFeatures, ConvolveJustBorder_General, GradientSobel_Outer, GradientSobel_UnrolledOuter, ImageMiscOps, ImplEdgeNonMaxSuppressionCrude, FactoryImageBorderAlgs, ImageBorderValue)
    public java.util.List detect(boofcv.struct.image.ImageGray $param_ImageGray_1, boofcv.alg.InputSanityCheck $param_InputSanityCheck_2, boofcv.alg.filter.derivative.DerivativeHelperFunctions $param_DerivativeHelperFunctions_3, boofcv.alg.filter.convolve.ConvolveImageNoBorder $param_ConvolveImageNoBorder_4, boofcv.alg.feature.detect.edge.GradientToEdgeFeatures $param_GradientToEdgeFeatures_5, boofcv.core.image.GeneralizedImageOps $param_GeneralizedImageOps_6, boofcv.alg.filter.binary.ThresholdImageOps $param_ThresholdImageOps_7, boofcv.alg.feature.detect.edge.GGradientToEdgeFeatures $param_GGradientToEdgeFeatures_8, boofcv.alg.filter.convolve.border.ConvolveJustBorder_General $param_ConvolveJustBorder_General_9, boofcv.alg.filter.derivative.impl.GradientSobel_Outer $param_GradientSobel_Outer_10, boofcv.alg.filter.derivative.impl.GradientSobel_UnrolledOuter $param_GradientSobel_UnrolledOuter_11, boofcv.alg.misc.ImageMiscOps $param_ImageMiscOps_12, boofcv.alg.feature.detect.edge.impl.ImplEdgeNonMaxSuppressionCrude $param_ImplEdgeNonMaxSuppressionCrude_13, boofcv.core.image.border.FactoryImageBorderAlgs $param_FactoryImageBorderAlgs_14, boofcv.core.image.border.ImageBorderValue $param_ImageBorderValue_15) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.detect( $param_ImageGray_1,  $param_InputSanityCheck_2,  $param_DerivativeHelperFunctions_3,  $param_ConvolveImageNoBorder_4,  $param_GradientToEdgeFeatures_5,  $param_GeneralizedImageOps_6,  $param_ThresholdImageOps_7,  $param_GGradientToEdgeFeatures_8,  $param_ConvolveJustBorder_General_9,  $param_GradientSobel_Outer_10,  $param_GradientSobel_UnrolledOuter_11,  $param_ImageMiscOps_12,  $param_ImplEdgeNonMaxSuppressionCrude_13,  $param_FactoryImageBorderAlgs_14,  $param_ImageBorderValue_15);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public java.util.List<georegression.struct.line.LineParametric2D_F32> boofcv.abst.feature.detect.line.DetectLineHoughPolar.detect(I,boofcv.alg.InputSanityCheck,boofcv.alg.filter.derivative.DerivativeHelperFunctions,boofcv.alg.filter.convolve.ConvolveImageNoBorder,boofcv.alg.feature.detect.edge.GradientToEdgeFeatures,boofcv.core.image.GeneralizedImageOps,boofcv.alg.filter.binary.ThresholdImageOps,boofcv.alg.feature.detect.edge.GGradientToEdgeFeatures,boofcv.alg.filter.convolve.border.ConvolveJustBorder_General,boofcv.alg.filter.derivative.impl.GradientSobel_Outer,boofcv.alg.filter.derivative.impl.GradientSobel_UnrolledOuter,boofcv.alg.misc.ImageMiscOps,boofcv.alg.feature.detect.edge.impl.ImplEdgeNonMaxSuppressionCrude,boofcv.core.image.border.FactoryImageBorderAlgs,boofcv.core.image.border.ImageBorderValue)";
                $__params.add($param_ImageGray_1);
                $__params.add($param_InputSanityCheck_2);
                $__params.add($param_DerivativeHelperFunctions_3);
                $__params.add($param_ConvolveImageNoBorder_4);
                $__params.add($param_GradientToEdgeFeatures_5);
                $__params.add($param_GeneralizedImageOps_6);
                $__params.add($param_ThresholdImageOps_7);
                $__params.add($param_GGradientToEdgeFeatures_8);
                $__params.add($param_ConvolveJustBorder_General_9);
                $__params.add($param_GradientSobel_Outer_10);
                $__params.add($param_GradientSobel_UnrolledOuter_11);
                $__params.add($param_ImageMiscOps_12);
                $__params.add($param_ImplEdgeNonMaxSuppressionCrude_13);
                $__params.add($param_FactoryImageBorderAlgs_14);
                $__params.add($param_ImageBorderValue_15);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.util.List) $__result);
    }
}
