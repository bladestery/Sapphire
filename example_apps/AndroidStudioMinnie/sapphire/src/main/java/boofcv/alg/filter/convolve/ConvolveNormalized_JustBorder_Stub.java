/*
 * Stub for class boofcv.alg.filter.convolve.normalized.ConvolveNormalized_JustBorder
 * Generated by Sapphire Compiler (sc).
 */
package boofcv.alg.filter.convolve.normalized.stubs;


public final class ConvolveNormalized_JustBorder_Stub extends boofcv.alg.filter.convolve.normalized.ConvolveNormalized_JustBorder implements sapphire.common.AppObjectStub {

    sapphire.policy.SapphirePolicy.SapphireClientPolicy $__client = null;
    boolean $__directInvocation = false;

    public ConvolveNormalized_JustBorder_Stub () {
        super();
    }


    public void $__initialize(sapphire.policy.SapphirePolicy.SapphireClientPolicy client) {
        $__client = client;
    }

    public void $__initialize(boolean directInvocation) {
        $__directInvocation = directInvocation;
    }

    public Object $__clone() throws CloneNotSupportedException {
        return super.clone();
    }



    // Implementation of vertical(Kernel1D_I32, GrayU8, GrayI8)
    public void vertical(boofcv.struct.convolve.Kernel1D_I32 $param_Kernel1D_I32_1, boofcv.struct.image.GrayU8 $param_GrayU8_2, boofcv.struct.image.GrayI8 $param_GrayI8_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.vertical( $param_Kernel1D_I32_1,  $param_GrayU8_2,  $param_GrayI8_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.filter.convolve.normalized.ConvolveNormalized_JustBorder.vertical(boofcv.struct.convolve.Kernel1D_I32,boofcv.struct.image.GrayU8,boofcv.struct.image.GrayI8)";
                $__params.add($param_Kernel1D_I32_1);
                $__params.add($param_GrayU8_2);
                $__params.add($param_GrayI8_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of vertical(Kernel1D_I32, GrayS32, GrayS32)
    public void vertical(boofcv.struct.convolve.Kernel1D_I32 $param_Kernel1D_I32_1, boofcv.struct.image.GrayS32 $param_GrayS32_2, boofcv.struct.image.GrayS32 $param_GrayS32_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.vertical( $param_Kernel1D_I32_1,  $param_GrayS32_2,  $param_GrayS32_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.filter.convolve.normalized.ConvolveNormalized_JustBorder.vertical(boofcv.struct.convolve.Kernel1D_I32,boofcv.struct.image.GrayS32,boofcv.struct.image.GrayS32)";
                $__params.add($param_Kernel1D_I32_1);
                $__params.add($param_GrayS32_2);
                $__params.add($param_GrayS32_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of vertical(Kernel1D_I32, GrayS16, GrayI16)
    public void vertical(boofcv.struct.convolve.Kernel1D_I32 $param_Kernel1D_I32_1, boofcv.struct.image.GrayS16 $param_GrayS16_2, boofcv.struct.image.GrayI16 $param_GrayI16_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.vertical( $param_Kernel1D_I32_1,  $param_GrayS16_2,  $param_GrayI16_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.filter.convolve.normalized.ConvolveNormalized_JustBorder.vertical(boofcv.struct.convolve.Kernel1D_I32,boofcv.struct.image.GrayS16,boofcv.struct.image.GrayI16)";
                $__params.add($param_Kernel1D_I32_1);
                $__params.add($param_GrayS16_2);
                $__params.add($param_GrayI16_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of vertical(Kernel1D_I32, Kernel1D_I32, GrayU16, GrayI8)
    public void vertical(boofcv.struct.convolve.Kernel1D_I32 $param_Kernel1D_I32_1, boofcv.struct.convolve.Kernel1D_I32 $param_Kernel1D_I32_2, boofcv.struct.image.GrayU16 $param_GrayU16_3, boofcv.struct.image.GrayI8 $param_GrayI8_4) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.vertical( $param_Kernel1D_I32_1,  $param_Kernel1D_I32_2,  $param_GrayU16_3,  $param_GrayI8_4);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.filter.convolve.normalized.ConvolveNormalized_JustBorder.vertical(boofcv.struct.convolve.Kernel1D_I32,boofcv.struct.convolve.Kernel1D_I32,boofcv.struct.image.GrayU16,boofcv.struct.image.GrayI8)";
                $__params.add($param_Kernel1D_I32_1);
                $__params.add($param_Kernel1D_I32_2);
                $__params.add($param_GrayU16_3);
                $__params.add($param_GrayI8_4);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of vertical(Kernel1D_I32, Kernel1D_I32, GrayS32, GrayI16)
    public void vertical(boofcv.struct.convolve.Kernel1D_I32 $param_Kernel1D_I32_1, boofcv.struct.convolve.Kernel1D_I32 $param_Kernel1D_I32_2, boofcv.struct.image.GrayS32 $param_GrayS32_3, boofcv.struct.image.GrayI16 $param_GrayI16_4) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.vertical( $param_Kernel1D_I32_1,  $param_Kernel1D_I32_2,  $param_GrayS32_3,  $param_GrayI16_4);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.filter.convolve.normalized.ConvolveNormalized_JustBorder.vertical(boofcv.struct.convolve.Kernel1D_I32,boofcv.struct.convolve.Kernel1D_I32,boofcv.struct.image.GrayS32,boofcv.struct.image.GrayI16)";
                $__params.add($param_Kernel1D_I32_1);
                $__params.add($param_Kernel1D_I32_2);
                $__params.add($param_GrayS32_3);
                $__params.add($param_GrayI16_4);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of vertical(Kernel1D_F64, GrayF64, GrayF64)
    public void vertical(boofcv.struct.convolve.Kernel1D_F64 $param_Kernel1D_F64_1, boofcv.struct.image.GrayF64 $param_GrayF64_2, boofcv.struct.image.GrayF64 $param_GrayF64_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.vertical( $param_Kernel1D_F64_1,  $param_GrayF64_2,  $param_GrayF64_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.filter.convolve.normalized.ConvolveNormalized_JustBorder.vertical(boofcv.struct.convolve.Kernel1D_F64,boofcv.struct.image.GrayF64,boofcv.struct.image.GrayF64)";
                $__params.add($param_Kernel1D_F64_1);
                $__params.add($param_GrayF64_2);
                $__params.add($param_GrayF64_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of vertical(Kernel1D_F32, GrayF32, GrayF32)
    public void vertical(boofcv.struct.convolve.Kernel1D_F32 $param_Kernel1D_F32_1, boofcv.struct.image.GrayF32 $param_GrayF32_2, boofcv.struct.image.GrayF32 $param_GrayF32_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.vertical( $param_Kernel1D_F32_1,  $param_GrayF32_2,  $param_GrayF32_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.filter.convolve.normalized.ConvolveNormalized_JustBorder.vertical(boofcv.struct.convolve.Kernel1D_F32,boofcv.struct.image.GrayF32,boofcv.struct.image.GrayF32)";
                $__params.add($param_Kernel1D_F32_1);
                $__params.add($param_GrayF32_2);
                $__params.add($param_GrayF32_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of horizontal(Kernel1D_I32, GrayU8, GrayI8)
    public void horizontal(boofcv.struct.convolve.Kernel1D_I32 $param_Kernel1D_I32_1, boofcv.struct.image.GrayU8 $param_GrayU8_2, boofcv.struct.image.GrayI8 $param_GrayI8_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.horizontal( $param_Kernel1D_I32_1,  $param_GrayU8_2,  $param_GrayI8_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.filter.convolve.normalized.ConvolveNormalized_JustBorder.horizontal(boofcv.struct.convolve.Kernel1D_I32,boofcv.struct.image.GrayU8,boofcv.struct.image.GrayI8)";
                $__params.add($param_Kernel1D_I32_1);
                $__params.add($param_GrayU8_2);
                $__params.add($param_GrayI8_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of horizontal(Kernel1D_I32, GrayS32, GrayS32)
    public void horizontal(boofcv.struct.convolve.Kernel1D_I32 $param_Kernel1D_I32_1, boofcv.struct.image.GrayS32 $param_GrayS32_2, boofcv.struct.image.GrayS32 $param_GrayS32_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.horizontal( $param_Kernel1D_I32_1,  $param_GrayS32_2,  $param_GrayS32_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.filter.convolve.normalized.ConvolveNormalized_JustBorder.horizontal(boofcv.struct.convolve.Kernel1D_I32,boofcv.struct.image.GrayS32,boofcv.struct.image.GrayS32)";
                $__params.add($param_Kernel1D_I32_1);
                $__params.add($param_GrayS32_2);
                $__params.add($param_GrayS32_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of horizontal(Kernel1D_I32, GrayS16, GrayI16)
    public void horizontal(boofcv.struct.convolve.Kernel1D_I32 $param_Kernel1D_I32_1, boofcv.struct.image.GrayS16 $param_GrayS16_2, boofcv.struct.image.GrayI16 $param_GrayI16_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.horizontal( $param_Kernel1D_I32_1,  $param_GrayS16_2,  $param_GrayI16_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.filter.convolve.normalized.ConvolveNormalized_JustBorder.horizontal(boofcv.struct.convolve.Kernel1D_I32,boofcv.struct.image.GrayS16,boofcv.struct.image.GrayI16)";
                $__params.add($param_Kernel1D_I32_1);
                $__params.add($param_GrayS16_2);
                $__params.add($param_GrayI16_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of horizontal(Kernel1D_F64, GrayF64, GrayF64)
    public void horizontal(boofcv.struct.convolve.Kernel1D_F64 $param_Kernel1D_F64_1, boofcv.struct.image.GrayF64 $param_GrayF64_2, boofcv.struct.image.GrayF64 $param_GrayF64_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.horizontal( $param_Kernel1D_F64_1,  $param_GrayF64_2,  $param_GrayF64_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.filter.convolve.normalized.ConvolveNormalized_JustBorder.horizontal(boofcv.struct.convolve.Kernel1D_F64,boofcv.struct.image.GrayF64,boofcv.struct.image.GrayF64)";
                $__params.add($param_Kernel1D_F64_1);
                $__params.add($param_GrayF64_2);
                $__params.add($param_GrayF64_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of horizontal(Kernel1D_F32, GrayF32, GrayF32)
    public void horizontal(boofcv.struct.convolve.Kernel1D_F32 $param_Kernel1D_F32_1, boofcv.struct.image.GrayF32 $param_GrayF32_2, boofcv.struct.image.GrayF32 $param_GrayF32_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.horizontal( $param_Kernel1D_F32_1,  $param_GrayF32_2,  $param_GrayF32_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.filter.convolve.normalized.ConvolveNormalized_JustBorder.horizontal(boofcv.struct.convolve.Kernel1D_F32,boofcv.struct.image.GrayF32,boofcv.struct.image.GrayF32)";
                $__params.add($param_Kernel1D_F32_1);
                $__params.add($param_GrayF32_2);
                $__params.add($param_GrayF32_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of convolve(Kernel2D_I32, GrayU8, GrayI8)
    public void convolve(boofcv.struct.convolve.Kernel2D_I32 $param_Kernel2D_I32_1, boofcv.struct.image.GrayU8 $param_GrayU8_2, boofcv.struct.image.GrayI8 $param_GrayI8_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.convolve( $param_Kernel2D_I32_1,  $param_GrayU8_2,  $param_GrayI8_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.filter.convolve.normalized.ConvolveNormalized_JustBorder.convolve(boofcv.struct.convolve.Kernel2D_I32,boofcv.struct.image.GrayU8,boofcv.struct.image.GrayI8)";
                $__params.add($param_Kernel2D_I32_1);
                $__params.add($param_GrayU8_2);
                $__params.add($param_GrayI8_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of convolve(Kernel2D_I32, GrayS32, GrayS32)
    public void convolve(boofcv.struct.convolve.Kernel2D_I32 $param_Kernel2D_I32_1, boofcv.struct.image.GrayS32 $param_GrayS32_2, boofcv.struct.image.GrayS32 $param_GrayS32_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.convolve( $param_Kernel2D_I32_1,  $param_GrayS32_2,  $param_GrayS32_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.filter.convolve.normalized.ConvolveNormalized_JustBorder.convolve(boofcv.struct.convolve.Kernel2D_I32,boofcv.struct.image.GrayS32,boofcv.struct.image.GrayS32)";
                $__params.add($param_Kernel2D_I32_1);
                $__params.add($param_GrayS32_2);
                $__params.add($param_GrayS32_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of convolve(Kernel2D_I32, GrayS16, GrayI16)
    public void convolve(boofcv.struct.convolve.Kernel2D_I32 $param_Kernel2D_I32_1, boofcv.struct.image.GrayS16 $param_GrayS16_2, boofcv.struct.image.GrayI16 $param_GrayI16_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.convolve( $param_Kernel2D_I32_1,  $param_GrayS16_2,  $param_GrayI16_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.filter.convolve.normalized.ConvolveNormalized_JustBorder.convolve(boofcv.struct.convolve.Kernel2D_I32,boofcv.struct.image.GrayS16,boofcv.struct.image.GrayI16)";
                $__params.add($param_Kernel2D_I32_1);
                $__params.add($param_GrayS16_2);
                $__params.add($param_GrayI16_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of convolve(Kernel2D_F64, GrayF64, GrayF64)
    public void convolve(boofcv.struct.convolve.Kernel2D_F64 $param_Kernel2D_F64_1, boofcv.struct.image.GrayF64 $param_GrayF64_2, boofcv.struct.image.GrayF64 $param_GrayF64_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.convolve( $param_Kernel2D_F64_1,  $param_GrayF64_2,  $param_GrayF64_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.filter.convolve.normalized.ConvolveNormalized_JustBorder.convolve(boofcv.struct.convolve.Kernel2D_F64,boofcv.struct.image.GrayF64,boofcv.struct.image.GrayF64)";
                $__params.add($param_Kernel2D_F64_1);
                $__params.add($param_GrayF64_2);
                $__params.add($param_GrayF64_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of convolve(Kernel2D_F32, GrayF32, GrayF32)
    public void convolve(boofcv.struct.convolve.Kernel2D_F32 $param_Kernel2D_F32_1, boofcv.struct.image.GrayF32 $param_GrayF32_2, boofcv.struct.image.GrayF32 $param_GrayF32_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.convolve( $param_Kernel2D_F32_1,  $param_GrayF32_2,  $param_GrayF32_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.filter.convolve.normalized.ConvolveNormalized_JustBorder.convolve(boofcv.struct.convolve.Kernel2D_F32,boofcv.struct.image.GrayF32,boofcv.struct.image.GrayF32)";
                $__params.add($param_Kernel2D_F32_1);
                $__params.add($param_GrayF32_2);
                $__params.add($param_GrayF32_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
