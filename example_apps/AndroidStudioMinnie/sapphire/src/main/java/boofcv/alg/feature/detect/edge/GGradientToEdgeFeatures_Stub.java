/*
 * Stub for class boofcv.alg.feature.detect.edge.GGradientToEdgeFeatures
 * Generated by Sapphire Compiler (sc).
 */
package boofcv.alg.feature.detect.edge.stubs;


public final class GGradientToEdgeFeatures_Stub extends boofcv.alg.feature.detect.edge.GGradientToEdgeFeatures implements sapphire.common.AppObjectStub {

    sapphire.policy.SapphirePolicy.SapphireClientPolicy $__client = null;
    boolean $__directInvocation = false;

    public GGradientToEdgeFeatures_Stub () {
        super();
    }


    public void $__initialize(sapphire.policy.SapphirePolicy.SapphireClientPolicy client) {
        $__client = client;
    }

    public void $__initialize(boolean directInvocation) {
        $__directInvocation = directInvocation;
    }

    public Object $__clone() throws CloneNotSupportedException {
        return super.clone();
    }



    // Implementation of nonMaxSuppressionCrude4(GrayF32, ImageGray, ImageGray, GrayF32, GradientToEdgeFeatures, InputSanityCheck)
    public void nonMaxSuppressionCrude4(boofcv.struct.image.GrayF32 $param_GrayF32_1, boofcv.struct.image.ImageGray $param_ImageGray_2, boofcv.struct.image.ImageGray $param_ImageGray_3, boofcv.struct.image.GrayF32 $param_GrayF32_4, boofcv.alg.feature.detect.edge.GradientToEdgeFeatures $param_GradientToEdgeFeatures_5, boofcv.alg.InputSanityCheck $param_InputSanityCheck_6) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.nonMaxSuppressionCrude4( $param_GrayF32_1,  $param_ImageGray_2,  $param_ImageGray_3,  $param_GrayF32_4,  $param_GradientToEdgeFeatures_5,  $param_InputSanityCheck_6);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <D> void boofcv.alg.feature.detect.edge.GGradientToEdgeFeatures.nonMaxSuppressionCrude4(boofcv.struct.image.GrayF32,D,D,boofcv.struct.image.GrayF32,boofcv.alg.feature.detect.edge.GradientToEdgeFeatures,boofcv.alg.InputSanityCheck)";
                $__params.add($param_GrayF32_1);
                $__params.add($param_ImageGray_2);
                $__params.add($param_ImageGray_3);
                $__params.add($param_GrayF32_4);
                $__params.add($param_GradientToEdgeFeatures_5);
                $__params.add($param_InputSanityCheck_6);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of intensityE(ImageGray, ImageGray, GrayF32, GradientToEdgeFeatures, InputSanityCheck)
    public void intensityE(boofcv.struct.image.ImageGray $param_ImageGray_1, boofcv.struct.image.ImageGray $param_ImageGray_2, boofcv.struct.image.GrayF32 $param_GrayF32_3, boofcv.alg.feature.detect.edge.GradientToEdgeFeatures $param_GradientToEdgeFeatures_4, boofcv.alg.InputSanityCheck $param_InputSanityCheck_5) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.intensityE( $param_ImageGray_1,  $param_ImageGray_2,  $param_GrayF32_3,  $param_GradientToEdgeFeatures_4,  $param_InputSanityCheck_5);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <D> void boofcv.alg.feature.detect.edge.GGradientToEdgeFeatures.intensityE(D,D,boofcv.struct.image.GrayF32,boofcv.alg.feature.detect.edge.GradientToEdgeFeatures,boofcv.alg.InputSanityCheck)";
                $__params.add($param_ImageGray_1);
                $__params.add($param_ImageGray_2);
                $__params.add($param_GrayF32_3);
                $__params.add($param_GradientToEdgeFeatures_4);
                $__params.add($param_InputSanityCheck_5);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of intensityAbs(ImageGray, ImageGray, GrayF32, GradientToEdgeFeatures, InputSanityCheck)
    public void intensityAbs(boofcv.struct.image.ImageGray $param_ImageGray_1, boofcv.struct.image.ImageGray $param_ImageGray_2, boofcv.struct.image.GrayF32 $param_GrayF32_3, boofcv.alg.feature.detect.edge.GradientToEdgeFeatures $param_GradientToEdgeFeatures_4, boofcv.alg.InputSanityCheck $param_InputSanityCheck_5) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.intensityAbs( $param_ImageGray_1,  $param_ImageGray_2,  $param_GrayF32_3,  $param_GradientToEdgeFeatures_4,  $param_InputSanityCheck_5);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <D> void boofcv.alg.feature.detect.edge.GGradientToEdgeFeatures.intensityAbs(D,D,boofcv.struct.image.GrayF32,boofcv.alg.feature.detect.edge.GradientToEdgeFeatures,boofcv.alg.InputSanityCheck)";
                $__params.add($param_ImageGray_1);
                $__params.add($param_ImageGray_2);
                $__params.add($param_GrayF32_3);
                $__params.add($param_GradientToEdgeFeatures_4);
                $__params.add($param_InputSanityCheck_5);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of direction2(ImageGray, ImageGray, GrayF32, GradientToEdgeFeatures, InputSanityCheck)
    public void direction2(boofcv.struct.image.ImageGray $param_ImageGray_1, boofcv.struct.image.ImageGray $param_ImageGray_2, boofcv.struct.image.GrayF32 $param_GrayF32_3, boofcv.alg.feature.detect.edge.GradientToEdgeFeatures $param_GradientToEdgeFeatures_4, boofcv.alg.InputSanityCheck $param_InputSanityCheck_5) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.direction2( $param_ImageGray_1,  $param_ImageGray_2,  $param_GrayF32_3,  $param_GradientToEdgeFeatures_4,  $param_InputSanityCheck_5);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <D> void boofcv.alg.feature.detect.edge.GGradientToEdgeFeatures.direction2(D,D,boofcv.struct.image.GrayF32,boofcv.alg.feature.detect.edge.GradientToEdgeFeatures,boofcv.alg.InputSanityCheck)";
                $__params.add($param_ImageGray_1);
                $__params.add($param_ImageGray_2);
                $__params.add($param_GrayF32_3);
                $__params.add($param_GradientToEdgeFeatures_4);
                $__params.add($param_InputSanityCheck_5);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of direction(ImageGray, ImageGray, GrayF32, GradientToEdgeFeatures, InputSanityCheck)
    public void direction(boofcv.struct.image.ImageGray $param_ImageGray_1, boofcv.struct.image.ImageGray $param_ImageGray_2, boofcv.struct.image.GrayF32 $param_GrayF32_3, boofcv.alg.feature.detect.edge.GradientToEdgeFeatures $param_GradientToEdgeFeatures_4, boofcv.alg.InputSanityCheck $param_InputSanityCheck_5) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.direction( $param_ImageGray_1,  $param_ImageGray_2,  $param_GrayF32_3,  $param_GradientToEdgeFeatures_4,  $param_InputSanityCheck_5);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <D> void boofcv.alg.feature.detect.edge.GGradientToEdgeFeatures.direction(D,D,boofcv.struct.image.GrayF32,boofcv.alg.feature.detect.edge.GradientToEdgeFeatures,boofcv.alg.InputSanityCheck)";
                $__params.add($param_ImageGray_1);
                $__params.add($param_ImageGray_2);
                $__params.add($param_GrayF32_3);
                $__params.add($param_GradientToEdgeFeatures_4);
                $__params.add($param_InputSanityCheck_5);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
