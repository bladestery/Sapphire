/*
 * Stub for class boofcv.alg.transform.fft.DiscreteFourierTransformOps
 * Generated by Sapphire Compiler (sc).
 */
package boofcv.alg.transform.fft.stubs;


public final class DiscreteFourierTransformOps_Stub extends boofcv.alg.transform.fft.DiscreteFourierTransformOps implements sapphire.common.AppObjectStub {

    sapphire.policy.SapphirePolicy.SapphireClientPolicy $__client = null;
    boolean $__directInvocation = false;

    public DiscreteFourierTransformOps_Stub () {
        super();
    }


    public void $__initialize(sapphire.policy.SapphirePolicy.SapphireClientPolicy client) {
        $__client = client;
    }

    public void $__initialize(boolean directInvocation) {
        $__directInvocation = directInvocation;
    }

    public Object $__clone() throws CloneNotSupportedException {
        return super.clone();
    }



    // Implementation of shiftZeroFrequency(InterleavedF64, boolean)
    public void shiftZeroFrequency(boofcv.struct.image.InterleavedF64 $param_InterleavedF64_1, boolean $param_boolean_2) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.shiftZeroFrequency( $param_InterleavedF64_1,  $param_boolean_2);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.transform.fft.DiscreteFourierTransformOps.shiftZeroFrequency(boofcv.struct.image.InterleavedF64,boolean)";
                $__params.add($param_InterleavedF64_1);
                $__params.add($param_boolean_2);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of shiftZeroFrequency(InterleavedF32, boolean)
    public void shiftZeroFrequency(boofcv.struct.image.InterleavedF32 $param_InterleavedF32_1, boolean $param_boolean_2) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.shiftZeroFrequency( $param_InterleavedF32_1,  $param_boolean_2);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.transform.fft.DiscreteFourierTransformOps.shiftZeroFrequency(boofcv.struct.image.InterleavedF32,boolean)";
                $__params.add($param_InterleavedF32_1);
                $__params.add($param_boolean_2);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of realToComplex(GrayF64, InterleavedF64, InputSanityCheck)
    public void realToComplex(boofcv.struct.image.GrayF64 $param_GrayF64_1, boofcv.struct.image.InterleavedF64 $param_InterleavedF64_2, boofcv.alg.InputSanityCheck $param_InputSanityCheck_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.realToComplex( $param_GrayF64_1,  $param_InterleavedF64_2,  $param_InputSanityCheck_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.transform.fft.DiscreteFourierTransformOps.realToComplex(boofcv.struct.image.GrayF64,boofcv.struct.image.InterleavedF64,boofcv.alg.InputSanityCheck)";
                $__params.add($param_GrayF64_1);
                $__params.add($param_InterleavedF64_2);
                $__params.add($param_InputSanityCheck_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of realToComplex(GrayF32, InterleavedF32, InputSanityCheck)
    public void realToComplex(boofcv.struct.image.GrayF32 $param_GrayF32_1, boofcv.struct.image.InterleavedF32 $param_InterleavedF32_2, boofcv.alg.InputSanityCheck $param_InputSanityCheck_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.realToComplex( $param_GrayF32_1,  $param_InterleavedF32_2,  $param_InputSanityCheck_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.transform.fft.DiscreteFourierTransformOps.realToComplex(boofcv.struct.image.GrayF32,boofcv.struct.image.InterleavedF32,boofcv.alg.InputSanityCheck)";
                $__params.add($param_GrayF32_1);
                $__params.add($param_InterleavedF32_2);
                $__params.add($param_InputSanityCheck_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of phase(InterleavedF64, GrayF64, InputSanityCheck)
    public void phase(boofcv.struct.image.InterleavedF64 $param_InterleavedF64_1, boofcv.struct.image.GrayF64 $param_GrayF64_2, boofcv.alg.InputSanityCheck $param_InputSanityCheck_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.phase( $param_InterleavedF64_1,  $param_GrayF64_2,  $param_InputSanityCheck_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.transform.fft.DiscreteFourierTransformOps.phase(boofcv.struct.image.InterleavedF64,boofcv.struct.image.GrayF64,boofcv.alg.InputSanityCheck)";
                $__params.add($param_InterleavedF64_1);
                $__params.add($param_GrayF64_2);
                $__params.add($param_InputSanityCheck_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of phase(InterleavedF32, GrayF32, InputSanityCheck)
    public void phase(boofcv.struct.image.InterleavedF32 $param_InterleavedF32_1, boofcv.struct.image.GrayF32 $param_GrayF32_2, boofcv.alg.InputSanityCheck $param_InputSanityCheck_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.phase( $param_InterleavedF32_1,  $param_GrayF32_2,  $param_InputSanityCheck_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.transform.fft.DiscreteFourierTransformOps.phase(boofcv.struct.image.InterleavedF32,boofcv.struct.image.GrayF32,boofcv.alg.InputSanityCheck)";
                $__params.add($param_InterleavedF32_1);
                $__params.add($param_GrayF32_2);
                $__params.add($param_InputSanityCheck_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of nextPow2(int)
    public int nextPow2(int $param_int_1) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.nextPow2( $param_int_1);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public int boofcv.alg.transform.fft.DiscreteFourierTransformOps.nextPow2(int)";
                $__params.add($param_int_1);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Integer) $__result).intValue();
    }

    // Implementation of multiplyRealComplex(GrayF64, InterleavedF64, InterleavedF64, InputSanityCheck)
    public void multiplyRealComplex(boofcv.struct.image.GrayF64 $param_GrayF64_1, boofcv.struct.image.InterleavedF64 $param_InterleavedF64_2, boofcv.struct.image.InterleavedF64 $param_InterleavedF64_3, boofcv.alg.InputSanityCheck $param_InputSanityCheck_4) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.multiplyRealComplex( $param_GrayF64_1,  $param_InterleavedF64_2,  $param_InterleavedF64_3,  $param_InputSanityCheck_4);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.transform.fft.DiscreteFourierTransformOps.multiplyRealComplex(boofcv.struct.image.GrayF64,boofcv.struct.image.InterleavedF64,boofcv.struct.image.InterleavedF64,boofcv.alg.InputSanityCheck)";
                $__params.add($param_GrayF64_1);
                $__params.add($param_InterleavedF64_2);
                $__params.add($param_InterleavedF64_3);
                $__params.add($param_InputSanityCheck_4);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of multiplyRealComplex(GrayF32, InterleavedF32, InterleavedF32, InputSanityCheck)
    public void multiplyRealComplex(boofcv.struct.image.GrayF32 $param_GrayF32_1, boofcv.struct.image.InterleavedF32 $param_InterleavedF32_2, boofcv.struct.image.InterleavedF32 $param_InterleavedF32_3, boofcv.alg.InputSanityCheck $param_InputSanityCheck_4) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.multiplyRealComplex( $param_GrayF32_1,  $param_InterleavedF32_2,  $param_InterleavedF32_3,  $param_InputSanityCheck_4);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.transform.fft.DiscreteFourierTransformOps.multiplyRealComplex(boofcv.struct.image.GrayF32,boofcv.struct.image.InterleavedF32,boofcv.struct.image.InterleavedF32,boofcv.alg.InputSanityCheck)";
                $__params.add($param_GrayF32_1);
                $__params.add($param_InterleavedF32_2);
                $__params.add($param_InterleavedF32_3);
                $__params.add($param_InputSanityCheck_4);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of multiplyComplex(InterleavedF64, InterleavedF64, InterleavedF64, InputSanityCheck)
    public void multiplyComplex(boofcv.struct.image.InterleavedF64 $param_InterleavedF64_1, boofcv.struct.image.InterleavedF64 $param_InterleavedF64_2, boofcv.struct.image.InterleavedF64 $param_InterleavedF64_3, boofcv.alg.InputSanityCheck $param_InputSanityCheck_4) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.multiplyComplex( $param_InterleavedF64_1,  $param_InterleavedF64_2,  $param_InterleavedF64_3,  $param_InputSanityCheck_4);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.transform.fft.DiscreteFourierTransformOps.multiplyComplex(boofcv.struct.image.InterleavedF64,boofcv.struct.image.InterleavedF64,boofcv.struct.image.InterleavedF64,boofcv.alg.InputSanityCheck)";
                $__params.add($param_InterleavedF64_1);
                $__params.add($param_InterleavedF64_2);
                $__params.add($param_InterleavedF64_3);
                $__params.add($param_InputSanityCheck_4);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of multiplyComplex(InterleavedF32, InterleavedF32, InterleavedF32, InputSanityCheck)
    public void multiplyComplex(boofcv.struct.image.InterleavedF32 $param_InterleavedF32_1, boofcv.struct.image.InterleavedF32 $param_InterleavedF32_2, boofcv.struct.image.InterleavedF32 $param_InterleavedF32_3, boofcv.alg.InputSanityCheck $param_InputSanityCheck_4) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.multiplyComplex( $param_InterleavedF32_1,  $param_InterleavedF32_2,  $param_InterleavedF32_3,  $param_InputSanityCheck_4);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.transform.fft.DiscreteFourierTransformOps.multiplyComplex(boofcv.struct.image.InterleavedF32,boofcv.struct.image.InterleavedF32,boofcv.struct.image.InterleavedF32,boofcv.alg.InputSanityCheck)";
                $__params.add($param_InterleavedF32_1);
                $__params.add($param_InterleavedF32_2);
                $__params.add($param_InterleavedF32_3);
                $__params.add($param_InputSanityCheck_4);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of magnitude(InterleavedF64, GrayF64, InputSanityCheck)
    public void magnitude(boofcv.struct.image.InterleavedF64 $param_InterleavedF64_1, boofcv.struct.image.GrayF64 $param_GrayF64_2, boofcv.alg.InputSanityCheck $param_InputSanityCheck_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.magnitude( $param_InterleavedF64_1,  $param_GrayF64_2,  $param_InputSanityCheck_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.transform.fft.DiscreteFourierTransformOps.magnitude(boofcv.struct.image.InterleavedF64,boofcv.struct.image.GrayF64,boofcv.alg.InputSanityCheck)";
                $__params.add($param_InterleavedF64_1);
                $__params.add($param_GrayF64_2);
                $__params.add($param_InputSanityCheck_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of magnitude(InterleavedF32, GrayF32, InputSanityCheck)
    public void magnitude(boofcv.struct.image.InterleavedF32 $param_InterleavedF32_1, boofcv.struct.image.GrayF32 $param_GrayF32_2, boofcv.alg.InputSanityCheck $param_InputSanityCheck_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.magnitude( $param_InterleavedF32_1,  $param_GrayF32_2,  $param_InputSanityCheck_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.transform.fft.DiscreteFourierTransformOps.magnitude(boofcv.struct.image.InterleavedF32,boofcv.struct.image.GrayF32,boofcv.alg.InputSanityCheck)";
                $__params.add($param_InterleavedF32_1);
                $__params.add($param_GrayF32_2);
                $__params.add($param_InputSanityCheck_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of isPowerOf2(int)
    public boolean isPowerOf2(int $param_int_1) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.isPowerOf2( $param_int_1);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public boolean boofcv.alg.transform.fft.DiscreteFourierTransformOps.isPowerOf2(int)";
                $__params.add($param_int_1);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Boolean) $__result).booleanValue();
    }

    // Implementation of createTransformF64()
    public boofcv.abst.transform.fft.DiscreteFourierTransform createTransformF64() {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.createTransformF64();
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public boofcv.abst.transform.fft.DiscreteFourierTransform<boofcv.struct.image.GrayF64, boofcv.struct.image.InterleavedF64> boofcv.alg.transform.fft.DiscreteFourierTransformOps.createTransformF64()";
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.abst.transform.fft.DiscreteFourierTransform) $__result);
    }

    // Implementation of createTransformF32()
    public boofcv.abst.transform.fft.DiscreteFourierTransform createTransformF32() {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.createTransformF32();
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public boofcv.abst.transform.fft.DiscreteFourierTransform<boofcv.struct.image.GrayF32, boofcv.struct.image.InterleavedF32> boofcv.alg.transform.fft.DiscreteFourierTransformOps.createTransformF32()";
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.abst.transform.fft.DiscreteFourierTransform) $__result);
    }

    // Implementation of checkImageArguments(ImageBase, ImageInterleaved, InputSanityCheck)
    public void checkImageArguments(boofcv.struct.image.ImageBase $param_ImageBase_1, boofcv.struct.image.ImageInterleaved $param_ImageInterleaved_2, boofcv.alg.InputSanityCheck $param_InputSanityCheck_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.checkImageArguments( $param_ImageBase_1,  $param_ImageInterleaved_2,  $param_InputSanityCheck_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void boofcv.alg.transform.fft.DiscreteFourierTransformOps.checkImageArguments(boofcv.struct.image.ImageBase,boofcv.struct.image.ImageInterleaved,boofcv.alg.InputSanityCheck)";
                $__params.add($param_ImageBase_1);
                $__params.add($param_ImageInterleaved_2);
                $__params.add($param_InputSanityCheck_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
