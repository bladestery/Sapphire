/*
 * Stub for class boofcv.factory.interpolate.FactoryInterpolation
 * Generated by Sapphire Compiler (sc).
 */
package boofcv.factory.interpolate.stubs;


public final class FactoryInterpolation_Stub extends boofcv.factory.interpolate.FactoryInterpolation implements sapphire.common.AppObjectStub {

    sapphire.policy.SapphirePolicy.SapphireClientPolicy $__client = null;
    boolean $__directInvocation = false;

    public FactoryInterpolation_Stub () {
        super();
    }


    public void $__initialize(sapphire.policy.SapphirePolicy.SapphireClientPolicy client) {
        $__client = client;
    }

    public void $__initialize(boolean directInvocation) {
        $__directInvocation = directInvocation;
    }

    public Object $__clone() throws CloneNotSupportedException {
        return super.clone();
    }



    // Implementation of polynomialS(int, double, double, Class)
    public boofcv.alg.interpolate.InterpolatePixelS polynomialS(int $param_int_1, double $param_double_2, double $param_double_3, java.lang.Class $param_Class_4) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.polynomialS( $param_int_1,  $param_double_2,  $param_double_3,  $param_Class_4);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <T> boofcv.alg.interpolate.InterpolatePixelS<T> boofcv.factory.interpolate.FactoryInterpolation.polynomialS(int,double,double,java.lang.Class<T>)";
                $__params.add($param_int_1);
                $__params.add($param_double_2);
                $__params.add($param_double_3);
                $__params.add($param_Class_4);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.alg.interpolate.InterpolatePixelS) $__result);
    }

    // Implementation of nearestNeighborRectangle(Class)
    public boofcv.alg.interpolate.InterpolateRectangle nearestNeighborRectangle(java.lang.Class $param_Class_1) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.nearestNeighborRectangle( $param_Class_1);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <T> boofcv.alg.interpolate.InterpolateRectangle<T> boofcv.factory.interpolate.FactoryInterpolation.nearestNeighborRectangle(java.lang.Class<?>)";
                $__params.add($param_Class_1);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.alg.interpolate.InterpolateRectangle) $__result);
    }

    // Implementation of nearestNeighborPixelS(Class)
    public boofcv.alg.interpolate.InterpolatePixelS nearestNeighborPixelS(java.lang.Class $param_Class_1) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.nearestNeighborPixelS( $param_Class_1);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <T> boofcv.alg.interpolate.InterpolatePixelS<T> boofcv.factory.interpolate.FactoryInterpolation.nearestNeighborPixelS(java.lang.Class<T>)";
                $__params.add($param_Class_1);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.alg.interpolate.InterpolatePixelS) $__result);
    }

    // Implementation of nearestNeighborPixelMB(ImageType, BorderType, FactoryImageBorder)
    public boofcv.alg.interpolate.InterpolatePixelMB nearestNeighborPixelMB(boofcv.struct.image.ImageType $param_ImageType_1, boofcv.core.image.border.BorderType $param_BorderType_2, boofcv.core.image.border.FactoryImageBorder $param_FactoryImageBorder_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.nearestNeighborPixelMB( $param_ImageType_1,  $param_BorderType_2,  $param_FactoryImageBorder_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <T> boofcv.alg.interpolate.InterpolatePixelMB<T> boofcv.factory.interpolate.FactoryInterpolation.nearestNeighborPixelMB(boofcv.struct.image.ImageType<T>,boofcv.core.image.border.BorderType,boofcv.core.image.border.FactoryImageBorder)";
                $__params.add($param_ImageType_1);
                $__params.add($param_BorderType_2);
                $__params.add($param_FactoryImageBorder_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.alg.interpolate.InterpolatePixelMB) $__result);
    }

    // Implementation of createPixelS(double, double, InterpolationType, BorderType, Class, FactoryImageBorder)
    public boofcv.alg.interpolate.InterpolatePixelS createPixelS(double $param_double_1, double $param_double_2, boofcv.alg.interpolate.InterpolationType $param_InterpolationType_3, boofcv.core.image.border.BorderType $param_BorderType_4, java.lang.Class $param_Class_5, boofcv.core.image.border.FactoryImageBorder $param_FactoryImageBorder_6) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.createPixelS( $param_double_1,  $param_double_2,  $param_InterpolationType_3,  $param_BorderType_4,  $param_Class_5,  $param_FactoryImageBorder_6);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <T> boofcv.alg.interpolate.InterpolatePixelS<T> boofcv.factory.interpolate.FactoryInterpolation.createPixelS(double,double,boofcv.alg.interpolate.InterpolationType,boofcv.core.image.border.BorderType,java.lang.Class<T>,boofcv.core.image.border.FactoryImageBorder)";
                $__params.add($param_double_1);
                $__params.add($param_double_2);
                $__params.add($param_InterpolationType_3);
                $__params.add($param_BorderType_4);
                $__params.add($param_Class_5);
                $__params.add($param_FactoryImageBorder_6);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.alg.interpolate.InterpolatePixelS) $__result);
    }

    // Implementation of createPixelS(double, double, InterpolationType, BorderType, ImageDataType, FactoryImageBorder)
    public boofcv.alg.interpolate.InterpolatePixelS createPixelS(double $param_double_1, double $param_double_2, boofcv.alg.interpolate.InterpolationType $param_InterpolationType_3, boofcv.core.image.border.BorderType $param_BorderType_4, boofcv.struct.image.ImageDataType $param_ImageDataType_5, boofcv.core.image.border.FactoryImageBorder $param_FactoryImageBorder_6) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.createPixelS( $param_double_1,  $param_double_2,  $param_InterpolationType_3,  $param_BorderType_4,  $param_ImageDataType_5,  $param_FactoryImageBorder_6);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <T> boofcv.alg.interpolate.InterpolatePixelS<T> boofcv.factory.interpolate.FactoryInterpolation.createPixelS(double,double,boofcv.alg.interpolate.InterpolationType,boofcv.core.image.border.BorderType,boofcv.struct.image.ImageDataType,boofcv.core.image.border.FactoryImageBorder)";
                $__params.add($param_double_1);
                $__params.add($param_double_2);
                $__params.add($param_InterpolationType_3);
                $__params.add($param_BorderType_4);
                $__params.add($param_ImageDataType_5);
                $__params.add($param_FactoryImageBorder_6);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.alg.interpolate.InterpolatePixelS) $__result);
    }

    // Implementation of createPixelPL(InterpolatePixelS)
    public boofcv.alg.interpolate.InterpolatePixelMB createPixelPL(boofcv.alg.interpolate.InterpolatePixelS $param_InterpolatePixelS_1) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.createPixelPL( $param_InterpolatePixelS_1);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <T> boofcv.alg.interpolate.InterpolatePixelMB<boofcv.struct.image.Planar<T>> boofcv.factory.interpolate.FactoryInterpolation.createPixelPL(boofcv.alg.interpolate.InterpolatePixelS<T>)";
                $__params.add($param_InterpolatePixelS_1);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.alg.interpolate.InterpolatePixelMB) $__result);
    }

    // Implementation of createPixelMB(double, double, InterpolationType, BorderType, ImageType, FactoryImageBorder)
    public boofcv.alg.interpolate.InterpolatePixelMB createPixelMB(double $param_double_1, double $param_double_2, boofcv.alg.interpolate.InterpolationType $param_InterpolationType_3, boofcv.core.image.border.BorderType $param_BorderType_4, boofcv.struct.image.ImageType $param_ImageType_5, boofcv.core.image.border.FactoryImageBorder $param_FactoryImageBorder_6) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.createPixelMB( $param_double_1,  $param_double_2,  $param_InterpolationType_3,  $param_BorderType_4,  $param_ImageType_5,  $param_FactoryImageBorder_6);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <T> boofcv.alg.interpolate.InterpolatePixelMB<T> boofcv.factory.interpolate.FactoryInterpolation.createPixelMB(double,double,boofcv.alg.interpolate.InterpolationType,boofcv.core.image.border.BorderType,boofcv.struct.image.ImageType<T>,boofcv.core.image.border.FactoryImageBorder)";
                $__params.add($param_double_1);
                $__params.add($param_double_2);
                $__params.add($param_InterpolationType_3);
                $__params.add($param_BorderType_4);
                $__params.add($param_ImageType_5);
                $__params.add($param_FactoryImageBorder_6);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.alg.interpolate.InterpolatePixelMB) $__result);
    }

    // Implementation of createPixel(double, double, InterpolationType, BorderType, ImageType, FactoryImageBorder)
    public boofcv.alg.interpolate.InterpolatePixel createPixel(double $param_double_1, double $param_double_2, boofcv.alg.interpolate.InterpolationType $param_InterpolationType_3, boofcv.core.image.border.BorderType $param_BorderType_4, boofcv.struct.image.ImageType $param_ImageType_5, boofcv.core.image.border.FactoryImageBorder $param_FactoryImageBorder_6) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.createPixel( $param_double_1,  $param_double_2,  $param_InterpolationType_3,  $param_BorderType_4,  $param_ImageType_5,  $param_FactoryImageBorder_6);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <T> boofcv.alg.interpolate.InterpolatePixel<T> boofcv.factory.interpolate.FactoryInterpolation.createPixel(double,double,boofcv.alg.interpolate.InterpolationType,boofcv.core.image.border.BorderType,boofcv.struct.image.ImageType<T>,boofcv.core.image.border.FactoryImageBorder)";
                $__params.add($param_double_1);
                $__params.add($param_double_2);
                $__params.add($param_InterpolationType_3);
                $__params.add($param_BorderType_4);
                $__params.add($param_ImageType_5);
                $__params.add($param_FactoryImageBorder_6);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.alg.interpolate.InterpolatePixel) $__result);
    }

    // Implementation of bilinearRectangle(Class)
    public boofcv.alg.interpolate.InterpolateRectangle bilinearRectangle(java.lang.Class $param_Class_1) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.bilinearRectangle( $param_Class_1);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <T> boofcv.alg.interpolate.InterpolateRectangle<T> boofcv.factory.interpolate.FactoryInterpolation.bilinearRectangle(java.lang.Class<T>)";
                $__params.add($param_Class_1);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.alg.interpolate.InterpolateRectangle) $__result);
    }

    // Implementation of bilinearRectangle(ImageGray)
    public boofcv.alg.interpolate.InterpolateRectangle bilinearRectangle(boofcv.struct.image.ImageGray $param_ImageGray_1) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.bilinearRectangle( $param_ImageGray_1);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <T> boofcv.alg.interpolate.InterpolateRectangle<T> boofcv.factory.interpolate.FactoryInterpolation.bilinearRectangle(T)";
                $__params.add($param_ImageGray_1);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.alg.interpolate.InterpolateRectangle) $__result);
    }

    // Implementation of bilinearPixelS(Class, BorderType, FactoryImageBorder)
    public boofcv.alg.interpolate.InterpolatePixelS bilinearPixelS(java.lang.Class $param_Class_1, boofcv.core.image.border.BorderType $param_BorderType_2, boofcv.core.image.border.FactoryImageBorder $param_FactoryImageBorder_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.bilinearPixelS( $param_Class_1,  $param_BorderType_2,  $param_FactoryImageBorder_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <T> boofcv.alg.interpolate.InterpolatePixelS<T> boofcv.factory.interpolate.FactoryInterpolation.bilinearPixelS(java.lang.Class<T>,boofcv.core.image.border.BorderType,boofcv.core.image.border.FactoryImageBorder)";
                $__params.add($param_Class_1);
                $__params.add($param_BorderType_2);
                $__params.add($param_FactoryImageBorder_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.alg.interpolate.InterpolatePixelS) $__result);
    }

    // Implementation of bilinearPixelS(ImageGray, BorderType, FactoryImageBorder)
    public boofcv.alg.interpolate.InterpolatePixelS bilinearPixelS(boofcv.struct.image.ImageGray $param_ImageGray_1, boofcv.core.image.border.BorderType $param_BorderType_2, boofcv.core.image.border.FactoryImageBorder $param_FactoryImageBorder_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.bilinearPixelS( $param_ImageGray_1,  $param_BorderType_2,  $param_FactoryImageBorder_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <T> boofcv.alg.interpolate.InterpolatePixelS<T> boofcv.factory.interpolate.FactoryInterpolation.bilinearPixelS(T,boofcv.core.image.border.BorderType,boofcv.core.image.border.FactoryImageBorder)";
                $__params.add($param_ImageGray_1);
                $__params.add($param_BorderType_2);
                $__params.add($param_FactoryImageBorder_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.alg.interpolate.InterpolatePixelS) $__result);
    }

    // Implementation of bilinearPixelMB(ImageType, BorderType, FactoryImageBorder)
    public boofcv.alg.interpolate.InterpolatePixelMB bilinearPixelMB(boofcv.struct.image.ImageType $param_ImageType_1, boofcv.core.image.border.BorderType $param_BorderType_2, boofcv.core.image.border.FactoryImageBorder $param_FactoryImageBorder_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.bilinearPixelMB( $param_ImageType_1,  $param_BorderType_2,  $param_FactoryImageBorder_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <T> boofcv.alg.interpolate.InterpolatePixelMB<T> boofcv.factory.interpolate.FactoryInterpolation.bilinearPixelMB(boofcv.struct.image.ImageType<T>,boofcv.core.image.border.BorderType,boofcv.core.image.border.FactoryImageBorder)";
                $__params.add($param_ImageType_1);
                $__params.add($param_BorderType_2);
                $__params.add($param_FactoryImageBorder_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.alg.interpolate.InterpolatePixelMB) $__result);
    }

    // Implementation of bilinearPixelMB(ImageMultiBand, BorderType, FactoryImageBorder)
    public boofcv.alg.interpolate.InterpolatePixelMB bilinearPixelMB(boofcv.struct.image.ImageMultiBand $param_ImageMultiBand_1, boofcv.core.image.border.BorderType $param_BorderType_2, boofcv.core.image.border.FactoryImageBorder $param_FactoryImageBorder_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.bilinearPixelMB( $param_ImageMultiBand_1,  $param_BorderType_2,  $param_FactoryImageBorder_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <T> boofcv.alg.interpolate.InterpolatePixelMB<T> boofcv.factory.interpolate.FactoryInterpolation.bilinearPixelMB(T,boofcv.core.image.border.BorderType,boofcv.core.image.border.FactoryImageBorder)";
                $__params.add($param_ImageMultiBand_1);
                $__params.add($param_BorderType_2);
                $__params.add($param_FactoryImageBorder_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.alg.interpolate.InterpolatePixelMB) $__result);
    }

    // Implementation of bicubicS(float, float, float, Class)
    public boofcv.alg.interpolate.InterpolatePixelS bicubicS(float $param_float_1, float $param_float_2, float $param_float_3, java.lang.Class $param_Class_4) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.bicubicS( $param_float_1,  $param_float_2,  $param_float_3,  $param_Class_4);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <T> boofcv.alg.interpolate.InterpolatePixelS<T> boofcv.factory.interpolate.FactoryInterpolation.bicubicS(float,float,float,java.lang.Class<T>)";
                $__params.add($param_float_1);
                $__params.add($param_float_2);
                $__params.add($param_float_3);
                $__params.add($param_Class_4);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.alg.interpolate.InterpolatePixelS) $__result);
    }
}
