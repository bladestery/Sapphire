/*
 * Stub for class boofcv.factory.filter.kernel.FactoryKernelGaussian
 * Generated by Sapphire Compiler (sc).
 */
package boofcv.factory.filter.kernel.stubs;


public final class FactoryKernelGaussian_Stub extends boofcv.factory.filter.kernel.FactoryKernelGaussian implements sapphire.common.AppObjectStub {

    sapphire.policy.SapphirePolicy.SapphireClientPolicy $__client = null;
    boolean $__directInvocation = false;

    public FactoryKernelGaussian_Stub () {
        super();
    }


    public void $__initialize(sapphire.policy.SapphirePolicy.SapphireClientPolicy client) {
        $__client = client;
    }

    public void $__initialize(boolean directInvocation) {
        $__directInvocation = directInvocation;
    }

    public Object $__clone() throws CloneNotSupportedException {
        return super.clone();
    }



    // Implementation of sigmaForRadius(double, int)
    public double sigmaForRadius(double $param_double_1, int $param_int_2) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.sigmaForRadius( $param_double_1,  $param_int_2);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public double boofcv.factory.filter.kernel.FactoryKernelGaussian.sigmaForRadius(double,int)";
                $__params.add($param_double_1);
                $__params.add($param_int_2);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Double) $__result).doubleValue();
    }

    // Implementation of radiusForSigma(double, int)
    public int radiusForSigma(double $param_double_1, int $param_int_2) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.radiusForSigma( $param_double_1,  $param_int_2);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public int boofcv.factory.filter.kernel.FactoryKernelGaussian.radiusForSigma(double,int)";
                $__params.add($param_double_1);
                $__params.add($param_int_2);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Integer) $__result).intValue();
    }

    // Implementation of gaussianWidth(double, int)
    public boofcv.struct.convolve.Kernel2D_F64 gaussianWidth(double $param_double_1, int $param_int_2) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.gaussianWidth( $param_double_1,  $param_int_2);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public boofcv.struct.convolve.Kernel2D_F64 boofcv.factory.filter.kernel.FactoryKernelGaussian.gaussianWidth(double,int)";
                $__params.add($param_double_1);
                $__params.add($param_int_2);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.struct.convolve.Kernel2D_F64) $__result);
    }

    // Implementation of gaussian2D_F64(double, int, boolean, boolean)
    public boofcv.struct.convolve.Kernel2D_F64 gaussian2D_F64(double $param_double_1, int $param_int_2, boolean $param_boolean_3, boolean $param_boolean_4) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.gaussian2D_F64( $param_double_1,  $param_int_2,  $param_boolean_3,  $param_boolean_4);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public boofcv.struct.convolve.Kernel2D_F64 boofcv.factory.filter.kernel.FactoryKernelGaussian.gaussian2D_F64(double,int,boolean,boolean)";
                $__params.add($param_double_1);
                $__params.add($param_int_2);
                $__params.add($param_boolean_3);
                $__params.add($param_boolean_4);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.struct.convolve.Kernel2D_F64) $__result);
    }

    // Implementation of gaussian2D_F32(double, int, boolean, boolean)
    public boofcv.struct.convolve.Kernel2D_F32 gaussian2D_F32(double $param_double_1, int $param_int_2, boolean $param_boolean_3, boolean $param_boolean_4) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.gaussian2D_F32( $param_double_1,  $param_int_2,  $param_boolean_3,  $param_boolean_4);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public boofcv.struct.convolve.Kernel2D_F32 boofcv.factory.filter.kernel.FactoryKernelGaussian.gaussian2D_F32(double,int,boolean,boolean)";
                $__params.add($param_double_1);
                $__params.add($param_int_2);
                $__params.add($param_boolean_3);
                $__params.add($param_boolean_4);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.struct.convolve.Kernel2D_F32) $__result);
    }

    // Implementation of gaussian2D(Class, double, int, GeneralizedImageOps)
    public boofcv.struct.convolve.Kernel2D gaussian2D(java.lang.Class $param_Class_1, double $param_double_2, int $param_int_3, boofcv.core.image.GeneralizedImageOps $param_GeneralizedImageOps_4) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.gaussian2D( $param_Class_1,  $param_double_2,  $param_int_3,  $param_GeneralizedImageOps_4);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <T,K> K boofcv.factory.filter.kernel.FactoryKernelGaussian.gaussian2D(java.lang.Class<T>,double,int,boofcv.core.image.GeneralizedImageOps)";
                $__params.add($param_Class_1);
                $__params.add($param_double_2);
                $__params.add($param_int_3);
                $__params.add($param_GeneralizedImageOps_4);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.struct.convolve.Kernel2D) $__result);
    }

    // Implementation of gaussian1D(Class, double, int, GeneralizedImageOps)
    public boofcv.struct.convolve.Kernel1D gaussian1D(java.lang.Class $param_Class_1, double $param_double_2, int $param_int_3, boofcv.core.image.GeneralizedImageOps $param_GeneralizedImageOps_4) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.gaussian1D( $param_Class_1,  $param_double_2,  $param_int_3,  $param_GeneralizedImageOps_4);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <T,K> K boofcv.factory.filter.kernel.FactoryKernelGaussian.gaussian1D(java.lang.Class<T>,double,int,boofcv.core.image.GeneralizedImageOps)";
                $__params.add($param_Class_1);
                $__params.add($param_double_2);
                $__params.add($param_int_3);
                $__params.add($param_GeneralizedImageOps_4);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.struct.convolve.Kernel1D) $__result);
    }

    // Implementation of gaussian(Class, double, int)
    public boofcv.struct.convolve.KernelBase gaussian(java.lang.Class $param_Class_1, double $param_double_2, int $param_int_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.gaussian( $param_Class_1,  $param_double_2,  $param_int_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <T> T boofcv.factory.filter.kernel.FactoryKernelGaussian.gaussian(java.lang.Class<T>,double,int)";
                $__params.add($param_Class_1);
                $__params.add($param_double_2);
                $__params.add($param_int_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.struct.convolve.KernelBase) $__result);
    }

    // Implementation of gaussian(int, boolean, int, double, int)
    public boofcv.struct.convolve.KernelBase gaussian(int $param_int_1, boolean $param_boolean_2, int $param_int_3, double $param_double_4, int $param_int_5) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.gaussian( $param_int_1,  $param_boolean_2,  $param_int_3,  $param_double_4,  $param_int_5);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <T> T boofcv.factory.filter.kernel.FactoryKernelGaussian.gaussian(int,boolean,int,double,int)";
                $__params.add($param_int_1);
                $__params.add($param_boolean_2);
                $__params.add($param_int_3);
                $__params.add($param_double_4);
                $__params.add($param_int_5);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.struct.convolve.KernelBase) $__result);
    }

    // Implementation of derivativeK(Class, int, double, int)
    public boofcv.struct.convolve.Kernel1D derivativeK(java.lang.Class $param_Class_1, int $param_int_2, double $param_double_3, int $param_int_4) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.derivativeK( $param_Class_1,  $param_int_2,  $param_double_3,  $param_int_4);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <T> T boofcv.factory.filter.kernel.FactoryKernelGaussian.derivativeK(java.lang.Class<T>,int,double,int)";
                $__params.add($param_Class_1);
                $__params.add($param_int_2);
                $__params.add($param_double_3);
                $__params.add($param_int_4);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.struct.convolve.Kernel1D) $__result);
    }

    // Implementation of derivativeI(Class, int, double, int, GeneralizedImageOps)
    public boofcv.struct.convolve.Kernel1D derivativeI(java.lang.Class $param_Class_1, int $param_int_2, double $param_double_3, int $param_int_4, boofcv.core.image.GeneralizedImageOps $param_GeneralizedImageOps_5) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.derivativeI( $param_Class_1,  $param_int_2,  $param_double_3,  $param_int_4,  $param_GeneralizedImageOps_5);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <T,K> K boofcv.factory.filter.kernel.FactoryKernelGaussian.derivativeI(java.lang.Class<T>,int,double,int,boofcv.core.image.GeneralizedImageOps)";
                $__params.add($param_Class_1);
                $__params.add($param_int_2);
                $__params.add($param_double_3);
                $__params.add($param_int_4);
                $__params.add($param_GeneralizedImageOps_5);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.struct.convolve.Kernel1D) $__result);
    }

    // Implementation of derivative(int, boolean, double, int)
    public boofcv.struct.convolve.Kernel1D derivative(int $param_int_1, boolean $param_boolean_2, double $param_double_3, int $param_int_4) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.derivative( $param_int_1,  $param_boolean_2,  $param_double_3,  $param_int_4);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public <T> T boofcv.factory.filter.kernel.FactoryKernelGaussian.derivative(int,boolean,double,int)";
                $__params.add($param_int_1);
                $__params.add($param_boolean_2);
                $__params.add($param_double_3);
                $__params.add($param_int_4);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((boofcv.struct.convolve.Kernel1D) $__result);
    }
}
