/*
 * Stub for class org.opencv.objdetect.CascadeClassifier
 * Generated by Sapphire Compiler (sc).
 */
package org.opencv.objdetect.stubs;


public final class CascadeClassifier_Stub extends org.opencv.objdetect.CascadeClassifier implements sapphire.common.AppObjectStub {

    sapphire.policy.SapphirePolicy.SapphireClientPolicy $__client = null;
    boolean $__directInvocation = false;

    public CascadeClassifier_Stub (java.lang.String $param_String_1) {
        super($param_String_1);
    }

    public CascadeClassifier_Stub () {
        super();
    }


    public void $__initialize(sapphire.policy.SapphirePolicy.SapphireClientPolicy client) {
        $__client = client;
    }

    public void $__initialize(boolean directInvocation) {
        $__directInvocation = directInvocation;
    }

    public Object $__clone() throws CloneNotSupportedException {
        return super.clone();
    }



    // Implementation of load(String)
    public boolean load(java.lang.String $param_String_1) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.load( $param_String_1);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public boolean org.opencv.objdetect.CascadeClassifier.load(java.lang.String)";
                $__params.add($param_String_1);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Boolean) $__result).booleanValue();
    }

    // Implementation of isOldFormatCascade()
    public boolean isOldFormatCascade() {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.isOldFormatCascade();
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public boolean org.opencv.objdetect.CascadeClassifier.isOldFormatCascade()";
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Boolean) $__result).booleanValue();
    }

    // Implementation of getOriginalWindowSize()
    public org.opencv.core.Size getOriginalWindowSize() {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.getOriginalWindowSize();
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public org.opencv.core.Size org.opencv.objdetect.CascadeClassifier.getOriginalWindowSize()";
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((org.opencv.core.Size) $__result);
    }

    // Implementation of getFeatureType()
    public int getFeatureType() {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.getFeatureType();
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public int org.opencv.objdetect.CascadeClassifier.getFeatureType()";
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Integer) $__result).intValue();
    }

    // Implementation of empty()
    public boolean empty() {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.empty();
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public boolean org.opencv.objdetect.CascadeClassifier.empty()";
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Boolean) $__result).booleanValue();
    }

    // Implementation of detectMultiScale3(Mat, MatOfRect, MatOfInt, MatOfDouble, double, int, int, Size, Size, boolean)
    public void detectMultiScale3(org.opencv.core.Mat $param_Mat_1, org.opencv.core.MatOfRect $param_MatOfRect_2, org.opencv.core.MatOfInt $param_MatOfInt_3, org.opencv.core.MatOfDouble $param_MatOfDouble_4, double $param_double_5, int $param_int_6, int $param_int_7, org.opencv.core.Size $param_Size_8, org.opencv.core.Size $param_Size_9, boolean $param_boolean_10) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.detectMultiScale3( $param_Mat_1,  $param_MatOfRect_2,  $param_MatOfInt_3,  $param_MatOfDouble_4,  $param_double_5,  $param_int_6,  $param_int_7,  $param_Size_8,  $param_Size_9,  $param_boolean_10);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void org.opencv.objdetect.CascadeClassifier.detectMultiScale3(org.opencv.core.Mat,org.opencv.core.MatOfRect,org.opencv.core.MatOfInt,org.opencv.core.MatOfDouble,double,int,int,org.opencv.core.Size,org.opencv.core.Size,boolean)";
                $__params.add($param_Mat_1);
                $__params.add($param_MatOfRect_2);
                $__params.add($param_MatOfInt_3);
                $__params.add($param_MatOfDouble_4);
                $__params.add($param_double_5);
                $__params.add($param_int_6);
                $__params.add($param_int_7);
                $__params.add($param_Size_8);
                $__params.add($param_Size_9);
                $__params.add($param_boolean_10);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of detectMultiScale3(Mat, MatOfRect, MatOfInt, MatOfDouble)
    public void detectMultiScale3(org.opencv.core.Mat $param_Mat_1, org.opencv.core.MatOfRect $param_MatOfRect_2, org.opencv.core.MatOfInt $param_MatOfInt_3, org.opencv.core.MatOfDouble $param_MatOfDouble_4) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.detectMultiScale3( $param_Mat_1,  $param_MatOfRect_2,  $param_MatOfInt_3,  $param_MatOfDouble_4);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void org.opencv.objdetect.CascadeClassifier.detectMultiScale3(org.opencv.core.Mat,org.opencv.core.MatOfRect,org.opencv.core.MatOfInt,org.opencv.core.MatOfDouble)";
                $__params.add($param_Mat_1);
                $__params.add($param_MatOfRect_2);
                $__params.add($param_MatOfInt_3);
                $__params.add($param_MatOfDouble_4);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of detectMultiScale2(Mat, MatOfRect, MatOfInt, double, int, int, Size, Size)
    public void detectMultiScale2(org.opencv.core.Mat $param_Mat_1, org.opencv.core.MatOfRect $param_MatOfRect_2, org.opencv.core.MatOfInt $param_MatOfInt_3, double $param_double_4, int $param_int_5, int $param_int_6, org.opencv.core.Size $param_Size_7, org.opencv.core.Size $param_Size_8) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.detectMultiScale2( $param_Mat_1,  $param_MatOfRect_2,  $param_MatOfInt_3,  $param_double_4,  $param_int_5,  $param_int_6,  $param_Size_7,  $param_Size_8);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void org.opencv.objdetect.CascadeClassifier.detectMultiScale2(org.opencv.core.Mat,org.opencv.core.MatOfRect,org.opencv.core.MatOfInt,double,int,int,org.opencv.core.Size,org.opencv.core.Size)";
                $__params.add($param_Mat_1);
                $__params.add($param_MatOfRect_2);
                $__params.add($param_MatOfInt_3);
                $__params.add($param_double_4);
                $__params.add($param_int_5);
                $__params.add($param_int_6);
                $__params.add($param_Size_7);
                $__params.add($param_Size_8);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of detectMultiScale2(Mat, MatOfRect, MatOfInt)
    public void detectMultiScale2(org.opencv.core.Mat $param_Mat_1, org.opencv.core.MatOfRect $param_MatOfRect_2, org.opencv.core.MatOfInt $param_MatOfInt_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.detectMultiScale2( $param_Mat_1,  $param_MatOfRect_2,  $param_MatOfInt_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void org.opencv.objdetect.CascadeClassifier.detectMultiScale2(org.opencv.core.Mat,org.opencv.core.MatOfRect,org.opencv.core.MatOfInt)";
                $__params.add($param_Mat_1);
                $__params.add($param_MatOfRect_2);
                $__params.add($param_MatOfInt_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of detectMultiScale(Mat, MatOfRect, double, int, int, Size, Size)
    public void detectMultiScale(org.opencv.core.Mat $param_Mat_1, org.opencv.core.MatOfRect $param_MatOfRect_2, double $param_double_3, int $param_int_4, int $param_int_5, org.opencv.core.Size $param_Size_6, org.opencv.core.Size $param_Size_7) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.detectMultiScale( $param_Mat_1,  $param_MatOfRect_2,  $param_double_3,  $param_int_4,  $param_int_5,  $param_Size_6,  $param_Size_7);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void org.opencv.objdetect.CascadeClassifier.detectMultiScale(org.opencv.core.Mat,org.opencv.core.MatOfRect,double,int,int,org.opencv.core.Size,org.opencv.core.Size)";
                $__params.add($param_Mat_1);
                $__params.add($param_MatOfRect_2);
                $__params.add($param_double_3);
                $__params.add($param_int_4);
                $__params.add($param_int_5);
                $__params.add($param_Size_6);
                $__params.add($param_Size_7);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of detectMultiScale(Mat, MatOfRect)
    public void detectMultiScale(org.opencv.core.Mat $param_Mat_1, org.opencv.core.MatOfRect $param_MatOfRect_2) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.detectMultiScale( $param_Mat_1,  $param_MatOfRect_2);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void org.opencv.objdetect.CascadeClassifier.detectMultiScale(org.opencv.core.Mat,org.opencv.core.MatOfRect)";
                $__params.add($param_Mat_1);
                $__params.add($param_MatOfRect_2);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of convert(String, String)
    public boolean convert(java.lang.String $param_String_1, java.lang.String $param_String_2) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.convert( $param_String_1,  $param_String_2);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public static boolean org.opencv.objdetect.CascadeClassifier.convert(java.lang.String,java.lang.String)";
                $__params.add($param_String_1);
                $__params.add($param_String_2);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Boolean) $__result).booleanValue();
    }
}
