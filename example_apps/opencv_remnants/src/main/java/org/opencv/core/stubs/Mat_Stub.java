/*
 * Stub for class org.opencv.core.Mat
 * Generated by Sapphire Compiler (sc).
 */
package org.opencv.core.stubs;


public final class Mat_Stub extends org.opencv.core.Mat implements sapphire.common.AppObjectStub {

    sapphire.policy.SapphirePolicy.SapphireClientPolicy $__client = null;
    boolean $__directInvocation = false;

    public Mat_Stub (org.opencv.core.Size $param_Size_1, int $param_int_2, org.opencv.core.Scalar $param_Scalar_3) {
        super($param_Size_1, $param_int_2, $param_Scalar_3);
    }

    public Mat_Stub (int $param_int_1, int $param_int_2, int $param_int_3, org.opencv.core.Scalar $param_Scalar_4) {
        super($param_int_1, $param_int_2, $param_int_3, $param_Scalar_4);
    }

    public Mat_Stub (org.opencv.core.Size $param_Size_1, int $param_int_2) {
        super($param_Size_1, $param_int_2);
    }

    public Mat_Stub (int $param_int_1, int $param_int_2, int $param_int_3) {
        super($param_int_1, $param_int_2, $param_int_3);
    }

    public Mat_Stub () {
        super();
    }

    public Mat_Stub (org.opencv.core.Mat $param_Mat_1, org.opencv.core.Range $param_Range_2) {
        super($param_Mat_1, $param_Range_2);
    }

    public Mat_Stub (org.opencv.core.Mat $param_Mat_1, org.opencv.core.Rect $param_Rect_2) {
        super($param_Mat_1, $param_Rect_2);
    }

    public Mat_Stub (long $param_long_1) {
        super($param_long_1);
    }

    public Mat_Stub (org.opencv.core.Mat $param_Mat_1, org.opencv.core.Range $param_Range_2, org.opencv.core.Range $param_Range_3) {
        super($param_Mat_1, $param_Range_2, $param_Range_3);
    }


    public void $__initialize(sapphire.policy.SapphirePolicy.SapphireClientPolicy client) {
        $__client = client;
    }

    public void $__initialize(boolean directInvocation) {
        $__directInvocation = directInvocation;
    }

    public Object $__clone() throws CloneNotSupportedException {
        return super.clone();
    }



    // Implementation of zeros(Size, int)
    public org.opencv.core.Mat zeros(org.opencv.core.Size $param_Size_1, int $param_int_2) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.zeros( $param_Size_1,  $param_int_2);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public static org.opencv.core.Mat org.opencv.core.Mat.zeros(org.opencv.core.Size,int)";
                $__params.add($param_Size_1);
                $__params.add($param_int_2);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((org.opencv.core.Mat) $__result);
    }

    // Implementation of zeros(int, int, int)
    public org.opencv.core.Mat zeros(int $param_int_1, int $param_int_2, int $param_int_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.zeros( $param_int_1,  $param_int_2,  $param_int_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public static org.opencv.core.Mat org.opencv.core.Mat.zeros(int,int,int)";
                $__params.add($param_int_1);
                $__params.add($param_int_2);
                $__params.add($param_int_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((org.opencv.core.Mat) $__result);
    }

    // Implementation of width()
    public int width() {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.width();
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public int org.opencv.core.Mat.width()";
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Integer) $__result).intValue();
    }

    // Implementation of type()
    public int type() {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.type();
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public int org.opencv.core.Mat.type()";
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Integer) $__result).intValue();
    }

    // Implementation of total()
    public long total() {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.total();
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public long org.opencv.core.Mat.total()";
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Long) $__result).longValue();
    }

    // Implementation of toString()
    public java.lang.String toString() {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.toString();
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public java.lang.String org.opencv.core.Mat.toString()";
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.String) $__result);
    }

    // Implementation of t()
    public org.opencv.core.Mat t() {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.t();
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public org.opencv.core.Mat org.opencv.core.Mat.t()";
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((org.opencv.core.Mat) $__result);
    }

    // Implementation of submat(Rect)
    public org.opencv.core.Mat submat(org.opencv.core.Rect $param_Rect_1) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.submat( $param_Rect_1);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public org.opencv.core.Mat org.opencv.core.Mat.submat(org.opencv.core.Rect)";
                $__params.add($param_Rect_1);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((org.opencv.core.Mat) $__result);
    }

    // Implementation of submat(Range, Range)
    public org.opencv.core.Mat submat(org.opencv.core.Range $param_Range_1, org.opencv.core.Range $param_Range_2) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.submat( $param_Range_1,  $param_Range_2);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public org.opencv.core.Mat org.opencv.core.Mat.submat(org.opencv.core.Range,org.opencv.core.Range)";
                $__params.add($param_Range_1);
                $__params.add($param_Range_2);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((org.opencv.core.Mat) $__result);
    }

    // Implementation of submat(int, int, int, int)
    public org.opencv.core.Mat submat(int $param_int_1, int $param_int_2, int $param_int_3, int $param_int_4) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.submat( $param_int_1,  $param_int_2,  $param_int_3,  $param_int_4);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public org.opencv.core.Mat org.opencv.core.Mat.submat(int,int,int,int)";
                $__params.add($param_int_1);
                $__params.add($param_int_2);
                $__params.add($param_int_3);
                $__params.add($param_int_4);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((org.opencv.core.Mat) $__result);
    }

    // Implementation of step1(int)
    public long step1(int $param_int_1) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.step1( $param_int_1);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public long org.opencv.core.Mat.step1(int)";
                $__params.add($param_int_1);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Long) $__result).longValue();
    }

    // Implementation of step1()
    public long step1() {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.step1();
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public long org.opencv.core.Mat.step1()";
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Long) $__result).longValue();
    }

    // Implementation of size()
    public org.opencv.core.Size size() {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.size();
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public org.opencv.core.Size org.opencv.core.Mat.size()";
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((org.opencv.core.Size) $__result);
    }

    // Implementation of setTo(Scalar, Mat)
    public org.opencv.core.Mat setTo(org.opencv.core.Scalar $param_Scalar_1, org.opencv.core.Mat $param_Mat_2) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.setTo( $param_Scalar_1,  $param_Mat_2);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public org.opencv.core.Mat org.opencv.core.Mat.setTo(org.opencv.core.Scalar,org.opencv.core.Mat)";
                $__params.add($param_Scalar_1);
                $__params.add($param_Mat_2);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((org.opencv.core.Mat) $__result);
    }

    // Implementation of setTo(Scalar)
    public org.opencv.core.Mat setTo(org.opencv.core.Scalar $param_Scalar_1) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.setTo( $param_Scalar_1);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public org.opencv.core.Mat org.opencv.core.Mat.setTo(org.opencv.core.Scalar)";
                $__params.add($param_Scalar_1);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((org.opencv.core.Mat) $__result);
    }

    // Implementation of setTo(Mat, Mat)
    public org.opencv.core.Mat setTo(org.opencv.core.Mat $param_Mat_1, org.opencv.core.Mat $param_Mat_2) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.setTo( $param_Mat_1,  $param_Mat_2);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public org.opencv.core.Mat org.opencv.core.Mat.setTo(org.opencv.core.Mat,org.opencv.core.Mat)";
                $__params.add($param_Mat_1);
                $__params.add($param_Mat_2);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((org.opencv.core.Mat) $__result);
    }

    // Implementation of setTo(Mat)
    public org.opencv.core.Mat setTo(org.opencv.core.Mat $param_Mat_1) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.setTo( $param_Mat_1);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public org.opencv.core.Mat org.opencv.core.Mat.setTo(org.opencv.core.Mat)";
                $__params.add($param_Mat_1);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((org.opencv.core.Mat) $__result);
    }

    // Implementation of rows()
    public int rows() {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.rows();
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public int org.opencv.core.Mat.rows()";
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Integer) $__result).intValue();
    }

    // Implementation of rowRange(Range)
    public org.opencv.core.Mat rowRange(org.opencv.core.Range $param_Range_1) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.rowRange( $param_Range_1);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public org.opencv.core.Mat org.opencv.core.Mat.rowRange(org.opencv.core.Range)";
                $__params.add($param_Range_1);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((org.opencv.core.Mat) $__result);
    }

    // Implementation of rowRange(int, int)
    public org.opencv.core.Mat rowRange(int $param_int_1, int $param_int_2) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.rowRange( $param_int_1,  $param_int_2);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public org.opencv.core.Mat org.opencv.core.Mat.rowRange(int,int)";
                $__params.add($param_int_1);
                $__params.add($param_int_2);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((org.opencv.core.Mat) $__result);
    }

    // Implementation of row(int)
    public org.opencv.core.Mat row(int $param_int_1) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.row( $param_int_1);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public org.opencv.core.Mat org.opencv.core.Mat.row(int)";
                $__params.add($param_int_1);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((org.opencv.core.Mat) $__result);
    }

    // Implementation of reshape(int, int)
    public org.opencv.core.Mat reshape(int $param_int_1, int $param_int_2) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.reshape( $param_int_1,  $param_int_2);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public org.opencv.core.Mat org.opencv.core.Mat.reshape(int,int)";
                $__params.add($param_int_1);
                $__params.add($param_int_2);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((org.opencv.core.Mat) $__result);
    }

    // Implementation of reshape(int)
    public org.opencv.core.Mat reshape(int $param_int_1) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.reshape( $param_int_1);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public org.opencv.core.Mat org.opencv.core.Mat.reshape(int)";
                $__params.add($param_int_1);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((org.opencv.core.Mat) $__result);
    }

    // Implementation of release()
    public void release() {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.release();
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void org.opencv.core.Mat.release()";
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of put(int, int, short[])
    public int put(int $param_int_1, int $param_int_2, short[] $param_arrayOf_short_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.put( $param_int_1,  $param_int_2,  $param_arrayOf_short_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public int org.opencv.core.Mat.put(int,int,short[])";
                $__params.add($param_int_1);
                $__params.add($param_int_2);
                $__params.add($param_arrayOf_short_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Integer) $__result).intValue();
    }

    // Implementation of put(int, int, int[])
    public int put(int $param_int_1, int $param_int_2, int[] $param_arrayOf_int_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.put( $param_int_1,  $param_int_2,  $param_arrayOf_int_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public int org.opencv.core.Mat.put(int,int,int[])";
                $__params.add($param_int_1);
                $__params.add($param_int_2);
                $__params.add($param_arrayOf_int_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Integer) $__result).intValue();
    }

    // Implementation of put(int, int, float[])
    public int put(int $param_int_1, int $param_int_2, float[] $param_arrayOf_float_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.put( $param_int_1,  $param_int_2,  $param_arrayOf_float_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public int org.opencv.core.Mat.put(int,int,float[])";
                $__params.add($param_int_1);
                $__params.add($param_int_2);
                $__params.add($param_arrayOf_float_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Integer) $__result).intValue();
    }

    // Implementation of put(int, int, double[])
    public int put(int $param_int_1, int $param_int_2, double[] $param_arrayOf_double_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.put( $param_int_1,  $param_int_2,  $param_arrayOf_double_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public int org.opencv.core.Mat.put(int,int,double...)";
                $__params.add($param_int_1);
                $__params.add($param_int_2);
                $__params.add($param_arrayOf_double_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Integer) $__result).intValue();
    }

    // Implementation of put(int, int, byte[])
    public int put(int $param_int_1, int $param_int_2, byte[] $param_arrayOf_byte_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.put( $param_int_1,  $param_int_2,  $param_arrayOf_byte_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public int org.opencv.core.Mat.put(int,int,byte[])";
                $__params.add($param_int_1);
                $__params.add($param_int_2);
                $__params.add($param_arrayOf_byte_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Integer) $__result).intValue();
    }

    // Implementation of push_back(Mat)
    public void push_back(org.opencv.core.Mat $param_Mat_1) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.push_back( $param_Mat_1);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void org.opencv.core.Mat.push_back(org.opencv.core.Mat)";
                $__params.add($param_Mat_1);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of ones(Size, int)
    public org.opencv.core.Mat ones(org.opencv.core.Size $param_Size_1, int $param_int_2) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.ones( $param_Size_1,  $param_int_2);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public static org.opencv.core.Mat org.opencv.core.Mat.ones(org.opencv.core.Size,int)";
                $__params.add($param_Size_1);
                $__params.add($param_int_2);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((org.opencv.core.Mat) $__result);
    }

    // Implementation of ones(int, int, int)
    public org.opencv.core.Mat ones(int $param_int_1, int $param_int_2, int $param_int_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.ones( $param_int_1,  $param_int_2,  $param_int_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public static org.opencv.core.Mat org.opencv.core.Mat.ones(int,int,int)";
                $__params.add($param_int_1);
                $__params.add($param_int_2);
                $__params.add($param_int_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((org.opencv.core.Mat) $__result);
    }

    // Implementation of mul(Mat, double)
    public org.opencv.core.Mat mul(org.opencv.core.Mat $param_Mat_1, double $param_double_2) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.mul( $param_Mat_1,  $param_double_2);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public org.opencv.core.Mat org.opencv.core.Mat.mul(org.opencv.core.Mat,double)";
                $__params.add($param_Mat_1);
                $__params.add($param_double_2);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((org.opencv.core.Mat) $__result);
    }

    // Implementation of mul(Mat)
    public org.opencv.core.Mat mul(org.opencv.core.Mat $param_Mat_1) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.mul( $param_Mat_1);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public org.opencv.core.Mat org.opencv.core.Mat.mul(org.opencv.core.Mat)";
                $__params.add($param_Mat_1);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((org.opencv.core.Mat) $__result);
    }

    // Implementation of locateROI(Size, Point)
    public void locateROI(org.opencv.core.Size $param_Size_1, org.opencv.core.Point $param_Point_2) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.locateROI( $param_Size_1,  $param_Point_2);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void org.opencv.core.Mat.locateROI(org.opencv.core.Size,org.opencv.core.Point)";
                $__params.add($param_Size_1);
                $__params.add($param_Point_2);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of isSubmatrix()
    public boolean isSubmatrix() {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.isSubmatrix();
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public boolean org.opencv.core.Mat.isSubmatrix()";
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Boolean) $__result).booleanValue();
    }

    // Implementation of isContinuous()
    public boolean isContinuous() {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.isContinuous();
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public boolean org.opencv.core.Mat.isContinuous()";
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Boolean) $__result).booleanValue();
    }

    // Implementation of inv(int)
    public org.opencv.core.Mat inv(int $param_int_1) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.inv( $param_int_1);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public org.opencv.core.Mat org.opencv.core.Mat.inv(int)";
                $__params.add($param_int_1);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((org.opencv.core.Mat) $__result);
    }

    // Implementation of inv()
    public org.opencv.core.Mat inv() {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.inv();
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public org.opencv.core.Mat org.opencv.core.Mat.inv()";
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((org.opencv.core.Mat) $__result);
    }

    // Implementation of height()
    public int height() {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.height();
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public int org.opencv.core.Mat.height()";
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Integer) $__result).intValue();
    }

    // Implementation of getNativeObjAddr()
    public long getNativeObjAddr() {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.getNativeObjAddr();
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public long org.opencv.core.Mat.getNativeObjAddr()";
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Long) $__result).longValue();
    }

    // Implementation of get(int, int, short[])
    public int get(int $param_int_1, int $param_int_2, short[] $param_arrayOf_short_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.get( $param_int_1,  $param_int_2,  $param_arrayOf_short_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public int org.opencv.core.Mat.get(int,int,short[])";
                $__params.add($param_int_1);
                $__params.add($param_int_2);
                $__params.add($param_arrayOf_short_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Integer) $__result).intValue();
    }

    // Implementation of get(int, int, int[])
    public int get(int $param_int_1, int $param_int_2, int[] $param_arrayOf_int_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.get( $param_int_1,  $param_int_2,  $param_arrayOf_int_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public int org.opencv.core.Mat.get(int,int,int[])";
                $__params.add($param_int_1);
                $__params.add($param_int_2);
                $__params.add($param_arrayOf_int_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Integer) $__result).intValue();
    }

    // Implementation of get(int, int, float[])
    public int get(int $param_int_1, int $param_int_2, float[] $param_arrayOf_float_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.get( $param_int_1,  $param_int_2,  $param_arrayOf_float_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public int org.opencv.core.Mat.get(int,int,float[])";
                $__params.add($param_int_1);
                $__params.add($param_int_2);
                $__params.add($param_arrayOf_float_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Integer) $__result).intValue();
    }

    // Implementation of get(int, int, double[])
    public int get(int $param_int_1, int $param_int_2, double[] $param_arrayOf_double_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.get( $param_int_1,  $param_int_2,  $param_arrayOf_double_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public int org.opencv.core.Mat.get(int,int,double[])";
                $__params.add($param_int_1);
                $__params.add($param_int_2);
                $__params.add($param_arrayOf_double_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Integer) $__result).intValue();
    }

    // Implementation of get(int, int, byte[])
    public int get(int $param_int_1, int $param_int_2, byte[] $param_arrayOf_byte_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.get( $param_int_1,  $param_int_2,  $param_arrayOf_byte_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public int org.opencv.core.Mat.get(int,int,byte[])";
                $__params.add($param_int_1);
                $__params.add($param_int_2);
                $__params.add($param_arrayOf_byte_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Integer) $__result).intValue();
    }

    // Implementation of get(int, int)
    public double[] get(int $param_int_1, int $param_int_2) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.get( $param_int_1,  $param_int_2);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public double[] org.opencv.core.Mat.get(int,int)";
                $__params.add($param_int_1);
                $__params.add($param_int_2);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((double[]) $__result);
    }

    // Implementation of eye(Size, int)
    public org.opencv.core.Mat eye(org.opencv.core.Size $param_Size_1, int $param_int_2) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.eye( $param_Size_1,  $param_int_2);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public static org.opencv.core.Mat org.opencv.core.Mat.eye(org.opencv.core.Size,int)";
                $__params.add($param_Size_1);
                $__params.add($param_int_2);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((org.opencv.core.Mat) $__result);
    }

    // Implementation of eye(int, int, int)
    public org.opencv.core.Mat eye(int $param_int_1, int $param_int_2, int $param_int_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.eye( $param_int_1,  $param_int_2,  $param_int_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public static org.opencv.core.Mat org.opencv.core.Mat.eye(int,int,int)";
                $__params.add($param_int_1);
                $__params.add($param_int_2);
                $__params.add($param_int_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((org.opencv.core.Mat) $__result);
    }

    // Implementation of empty()
    public boolean empty() {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.empty();
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public boolean org.opencv.core.Mat.empty()";
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Boolean) $__result).booleanValue();
    }

    // Implementation of elemSize1()
    public long elemSize1() {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.elemSize1();
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public long org.opencv.core.Mat.elemSize1()";
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Long) $__result).longValue();
    }

    // Implementation of elemSize()
    public long elemSize() {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.elemSize();
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public long org.opencv.core.Mat.elemSize()";
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Long) $__result).longValue();
    }

    // Implementation of dump()
    public java.lang.String dump() {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.dump();
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public java.lang.String org.opencv.core.Mat.dump()";
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.String) $__result);
    }

    // Implementation of dot(Mat)
    public double dot(org.opencv.core.Mat $param_Mat_1) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.dot( $param_Mat_1);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public double org.opencv.core.Mat.dot(org.opencv.core.Mat)";
                $__params.add($param_Mat_1);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Double) $__result).doubleValue();
    }

    // Implementation of dims()
    public int dims() {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.dims();
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public int org.opencv.core.Mat.dims()";
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Integer) $__result).intValue();
    }

    // Implementation of diag(Mat)
    public org.opencv.core.Mat diag(org.opencv.core.Mat $param_Mat_1) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.diag( $param_Mat_1);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public static org.opencv.core.Mat org.opencv.core.Mat.diag(org.opencv.core.Mat)";
                $__params.add($param_Mat_1);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((org.opencv.core.Mat) $__result);
    }

    // Implementation of diag(int)
    public org.opencv.core.Mat diag(int $param_int_1) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.diag( $param_int_1);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public org.opencv.core.Mat org.opencv.core.Mat.diag(int)";
                $__params.add($param_int_1);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((org.opencv.core.Mat) $__result);
    }

    // Implementation of diag()
    public org.opencv.core.Mat diag() {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.diag();
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public org.opencv.core.Mat org.opencv.core.Mat.diag()";
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((org.opencv.core.Mat) $__result);
    }

    // Implementation of depth()
    public int depth() {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.depth();
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public int org.opencv.core.Mat.depth()";
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Integer) $__result).intValue();
    }

    // Implementation of dataAddr()
    public long dataAddr() {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.dataAddr();
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public long org.opencv.core.Mat.dataAddr()";
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Long) $__result).longValue();
    }

    // Implementation of cross(Mat)
    public org.opencv.core.Mat cross(org.opencv.core.Mat $param_Mat_1) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.cross( $param_Mat_1);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public org.opencv.core.Mat org.opencv.core.Mat.cross(org.opencv.core.Mat)";
                $__params.add($param_Mat_1);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((org.opencv.core.Mat) $__result);
    }

    // Implementation of create(Size, int)
    public void create(org.opencv.core.Size $param_Size_1, int $param_int_2) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.create( $param_Size_1,  $param_int_2);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void org.opencv.core.Mat.create(org.opencv.core.Size,int)";
                $__params.add($param_Size_1);
                $__params.add($param_int_2);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of create(int, int, int)
    public void create(int $param_int_1, int $param_int_2, int $param_int_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.create( $param_int_1,  $param_int_2,  $param_int_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void org.opencv.core.Mat.create(int,int,int)";
                $__params.add($param_int_1);
                $__params.add($param_int_2);
                $__params.add($param_int_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of copyTo(Mat, Mat)
    public void copyTo(org.opencv.core.Mat $param_Mat_1, org.opencv.core.Mat $param_Mat_2) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.copyTo( $param_Mat_1,  $param_Mat_2);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void org.opencv.core.Mat.copyTo(org.opencv.core.Mat,org.opencv.core.Mat)";
                $__params.add($param_Mat_1);
                $__params.add($param_Mat_2);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of copyTo(Mat)
    public void copyTo(org.opencv.core.Mat $param_Mat_1) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.copyTo( $param_Mat_1);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void org.opencv.core.Mat.copyTo(org.opencv.core.Mat)";
                $__params.add($param_Mat_1);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of convertTo(Mat, int, double, double)
    public void convertTo(org.opencv.core.Mat $param_Mat_1, int $param_int_2, double $param_double_3, double $param_double_4) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.convertTo( $param_Mat_1,  $param_int_2,  $param_double_3,  $param_double_4);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void org.opencv.core.Mat.convertTo(org.opencv.core.Mat,int,double,double)";
                $__params.add($param_Mat_1);
                $__params.add($param_int_2);
                $__params.add($param_double_3);
                $__params.add($param_double_4);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of convertTo(Mat, int, double)
    public void convertTo(org.opencv.core.Mat $param_Mat_1, int $param_int_2, double $param_double_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.convertTo( $param_Mat_1,  $param_int_2,  $param_double_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void org.opencv.core.Mat.convertTo(org.opencv.core.Mat,int,double)";
                $__params.add($param_Mat_1);
                $__params.add($param_int_2);
                $__params.add($param_double_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of convertTo(Mat, int)
    public void convertTo(org.opencv.core.Mat $param_Mat_1, int $param_int_2) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.convertTo( $param_Mat_1,  $param_int_2);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void org.opencv.core.Mat.convertTo(org.opencv.core.Mat,int)";
                $__params.add($param_Mat_1);
                $__params.add($param_int_2);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of cols()
    public int cols() {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.cols();
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public int org.opencv.core.Mat.cols()";
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Integer) $__result).intValue();
    }

    // Implementation of colRange(Range)
    public org.opencv.core.Mat colRange(org.opencv.core.Range $param_Range_1) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.colRange( $param_Range_1);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public org.opencv.core.Mat org.opencv.core.Mat.colRange(org.opencv.core.Range)";
                $__params.add($param_Range_1);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((org.opencv.core.Mat) $__result);
    }

    // Implementation of colRange(int, int)
    public org.opencv.core.Mat colRange(int $param_int_1, int $param_int_2) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.colRange( $param_int_1,  $param_int_2);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public org.opencv.core.Mat org.opencv.core.Mat.colRange(int,int)";
                $__params.add($param_int_1);
                $__params.add($param_int_2);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((org.opencv.core.Mat) $__result);
    }

    // Implementation of col(int)
    public org.opencv.core.Mat col(int $param_int_1) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.col( $param_int_1);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public org.opencv.core.Mat org.opencv.core.Mat.col(int)";
                $__params.add($param_int_1);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((org.opencv.core.Mat) $__result);
    }

    // Implementation of clone()
    public org.opencv.core.Mat clone() {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.clone();
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public org.opencv.core.Mat org.opencv.core.Mat.clone()";
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((org.opencv.core.Mat) $__result);
    }

    // Implementation of checkVector(int, int, boolean)
    public int checkVector(int $param_int_1, int $param_int_2, boolean $param_boolean_3) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.checkVector( $param_int_1,  $param_int_2,  $param_boolean_3);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public int org.opencv.core.Mat.checkVector(int,int,boolean)";
                $__params.add($param_int_1);
                $__params.add($param_int_2);
                $__params.add($param_boolean_3);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Integer) $__result).intValue();
    }

    // Implementation of checkVector(int, int)
    public int checkVector(int $param_int_1, int $param_int_2) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.checkVector( $param_int_1,  $param_int_2);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public int org.opencv.core.Mat.checkVector(int,int)";
                $__params.add($param_int_1);
                $__params.add($param_int_2);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Integer) $__result).intValue();
    }

    // Implementation of checkVector(int)
    public int checkVector(int $param_int_1) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.checkVector( $param_int_1);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public int org.opencv.core.Mat.checkVector(int)";
                $__params.add($param_int_1);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Integer) $__result).intValue();
    }

    // Implementation of channels()
    public int channels() {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.channels();
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public int org.opencv.core.Mat.channels()";
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((java.lang.Integer) $__result).intValue();
    }

    // Implementation of assignTo(Mat, int)
    public void assignTo(org.opencv.core.Mat $param_Mat_1, int $param_int_2) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.assignTo( $param_Mat_1,  $param_int_2);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void org.opencv.core.Mat.assignTo(org.opencv.core.Mat,int)";
                $__params.add($param_Mat_1);
                $__params.add($param_int_2);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of assignTo(Mat)
    public void assignTo(org.opencv.core.Mat $param_Mat_1) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                super.assignTo( $param_Mat_1);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public void org.opencv.core.Mat.assignTo(org.opencv.core.Mat)";
                $__params.add($param_Mat_1);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Implementation of adjustROI(int, int, int, int)
    public org.opencv.core.Mat adjustROI(int $param_int_1, int $param_int_2, int $param_int_3, int $param_int_4) {
        java.lang.Object $__result = null;
        try {
            if ($__directInvocation)
                $__result = super.adjustROI( $param_int_1,  $param_int_2,  $param_int_3,  $param_int_4);
            else {
                java.util.ArrayList<Object> $__params = new java.util.ArrayList<Object>();
                String $__method = "public org.opencv.core.Mat org.opencv.core.Mat.adjustROI(int,int,int,int)";
                $__params.add($param_int_1);
                $__params.add($param_int_2);
                $__params.add($param_int_3);
                $__params.add($param_int_4);
                $__result = $__client.onRPC($__method, $__params);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return ((org.opencv.core.Mat) $__result);
    }
}
